Grammar

    0 $accept: program $end

    1 program: declarations

    2 declarations: decl declarations
    3             | decl

    4 decl: globaldec
    5     | globaldef
    6     | fundef

    7 globaldec: EXTERN type ID SEMICOLON
    8          | EXTERN type ID STRAIGHT_BRACKET_L ids STRAIGHT_BRACKET_R SEMICOLON

    9 globaldef: EXPORT globaldef
   10          | type ID SEMICOLON
   11          | type ID LET expr SEMICOLON
   12          | type ID exprs SEMICOLON
   13          | type ID exprs LET expr SEMICOLON

   14 stmts: stmt stmts
   15      | stmt

   16 stmt: assign
   17     | while
   18     | dowhile
   19     | for
   20     | if
   21     | return
   22     | exprstmt

   23 assign: varlet LET expr SEMICOLON

   24 while: WHILE BRACKET_L expr BRACKET_R CURLY_BRACKET_L stmts CURLY_BRACKET_R

   25 dowhile: DO CURLY_BRACKET_L stmts CURLY_BRACKET_R WHILE BRACKET_L expr BRACKET_R SEMICOLON

   26 if: IF BRACKET_L expr BRACKET_R stmt
   27   | IF BRACKET_L expr BRACKET_R stmt ELSE stmt
   28   | IF BRACKET_L expr BRACKET_R CURLY_BRACKET_L stmts CURLY_BRACKET_R ELSE CURLY_BRACKET_L stmts CURLY_BRACKET_R
   29   | IF BRACKET_L expr BRACKET_R stmt ELSE CURLY_BRACKET_L stmts CURLY_BRACKET_R
   30   | IF BRACKET_L expr BRACKET_R CURLY_BRACKET_L stmts CURLY_BRACKET_R ELSE stmt

   31 for: FOR BRACKET_L INT ID LET expr COMMA expr COMMA expr BRACKET_R CURLY_BRACKET_L exprs CURLY_BRACKET_R
   32    | FOR BRACKET_L INT ID LET expr COMMA expr BRACKET_R CURLY_BRACKET_R exprs CURLY_BRACKET_R

   33 return: RETURN expr SEMICOLON
   34       | RETURN SEMICOLON

   35 exprstmt: ID BRACKET_L expr BRACKET_R SEMICOLON

   36 funbody: vardec
   37        | vardec fundefs
   38        | vardec stmts
   39        | fundefs stmts
   40        | stmts
   41        | fundefs
   42        | vardec fundefs stmts

   43 fundefs: fundef
   44        | fundef fundefs

   45 fundef: EXPORT fundef
   46       | type ID BRACKET_L BRACKET_R CURLY_BRACKET_L funbody CURLY_BRACKET_R
   47       | VOID ID BRACKET_L BRACKET_R CURLY_BRACKET_L funbody CURLY_BRACKET_R
   48       | type ID BRACKET_L param BRACKET_R CURLY_BRACKET_L funbody CURLY_BRACKET_R
   49       | VOID ID BRACKET_L param BRACKET_R CURLY_BRACKET_L funbody CURLY_BRACKET_R
   50       | type ID BRACKET_L BRACKET_R CURLY_BRACKET_L CURLY_BRACKET_R
   51       | VOID ID BRACKET_L BRACKET_R CURLY_BRACKET_L CURLY_BRACKET_R
   52       | type ID BRACKET_L param BRACKET_R CURLY_BRACKET_L CURLY_BRACKET_R
   53       | VOID ID BRACKET_L param BRACKET_R CURLY_BRACKET_L CURLY_BRACKET_R

   54 param: type ID COMMA param
   55      | type ID
   56      | type STRAIGHT_BRACKET_L ids STRAIGHT_BRACKET_R ID
   57      | type STRAIGHT_BRACKET_L ids STRAIGHT_BRACKET_R ID param

   58 ids: ID
   59    | ID COMMA ids

   60 vardec: vardec type ID SEMICOLON
   61       | vardec type ID LET expr SEMICOLON
   62       | vardec type STRAIGHT_BRACKET_L exprs STRAIGHT_BRACKET_R ID SEMICOLON
   63       | vardec type STRAIGHT_BRACKET_L exprs STRAIGHT_BRACKET_R ID LET expr SEMICOLON
   64       | type ID SEMICOLON
   65       | type ID LET expr SEMICOLON
   66       | type STRAIGHT_BRACKET_L exprs STRAIGHT_BRACKET_R ID SEMICOLON
   67       | type STRAIGHT_BRACKET_L exprs STRAIGHT_BRACKET_R ID LET expr SEMICOLON

   68 varlet: ID exprs
   69       | ID

   70 exprs: expr COMMA exprs
   71      | expr

   72 expr: constant
   73     | BRACKET_L expr BRACKET_R
   74     | var
   75     | funcall
   76     | NOT expr
   77     | MINUS expr
   78     | cast
   79     | expr PLUS expr
   80     | expr MINUS expr
   81     | expr STAR expr
   82     | expr SLASH expr
   83     | expr PERCENT expr
   84     | expr LE expr
   85     | expr LT expr
   86     | expr GE expr
   87     | expr GT expr
   88     | expr EQ expr
   89     | expr NE expr
   90     | expr OR expr
   91     | expr AND expr
   92     | ID arrexpr
   93     | arrexpr

   94 cast: BRACKET_L type BRACKET_R expr

   95 funcall: ID BRACKET_L exprs BRACKET_R
   96        | ID BRACKET_L BRACKET_R

   97 arrexpr: STRAIGHT_BRACKET_L exprs STRAIGHT_BRACKET_R

   98 var: ID

   99 constant: floatval
  100         | intval
  101         | boolval

  102 floatval: FLOAT

  103 intval: NUM

  104 boolval: TRUEVAL
  105        | FALSEVAL

  106 type: INT
  107     | FLT
  108     | BOOL


Terminals, with rules where they appear

$end (0) 0
error (256)
BRACKET_L (258) 24 25 26 27 28 29 30 31 32 35 46 47 48 49 50 51 52
    53 73 94 95 96
BRACKET_R (259) 24 25 26 27 28 29 30 31 32 35 46 47 48 49 50 51 52
    53 73 94 95 96
CURLY_BRACKET_L (260) 24 25 28 29 30 31 46 47 48 49 50 51 52 53
CURLY_BRACKET_R (261) 24 25 28 29 30 31 32 46 47 48 49 50 51 52 53
STRAIGHT_BRACKET_L (262) 8 56 57 62 63 66 67 97
STRAIGHT_BRACKET_R (263) 8 56 57 62 63 66 67 97
COMMA (264) 31 32 54 59 70
SEMICOLON (265) 7 8 10 11 12 13 23 25 33 34 35 60 61 62 63 64 65 66
    67
MINUS (266) 77 80
PLUS (267) 79
STAR (268) 81
SLASH (269) 82
PERCENT (270) 83
LE (271) 84
LT (272) 85
GE (273) 86
GT (274) 87
EQ (275) 88
NE (276) 89
OR (277) 90
AND (278) 91
TRUEVAL (279) 104
FALSEVAL (280) 105
LET (281) 11 13 23 31 32 61 63 65 67
NOT (282) 76
IF (283) 26 27 28 29 30
ELSE (284) 27 28 29 30
WHILE (285) 24 25
DO (286) 25
FOR (287) 31 32
RETURN (288) 33 34
EXTERN (289) 7 8
EXPORT (290) 9 45
VOID (291) 47 49 51 53
INT (292) 31 32 106
FLT (293) 107
BOOL (294) 108
NUM (295) 103
FLOAT (296) 102
ID (297) 7 8 10 11 12 13 31 32 35 46 47 48 49 50 51 52 53 54 55 56
    57 58 59 60 61 62 63 64 65 66 67 68 69 92 95 96 98
UNARY (298)
IFX (299)


Nonterminals, with rules where they appear

$accept (45)
    on left: 0
program (46)
    on left: 1, on right: 0
declarations (47)
    on left: 2 3, on right: 1 2
decl (48)
    on left: 4 5 6, on right: 2 3
globaldec (49)
    on left: 7 8, on right: 4
globaldef (50)
    on left: 9 10 11 12 13, on right: 5 9
stmts (51)
    on left: 14 15, on right: 14 24 25 28 29 30 38 39 40 42
stmt (52)
    on left: 16 17 18 19 20 21 22, on right: 14 15 26 27 29 30
assign (53)
    on left: 23, on right: 16
while (54)
    on left: 24, on right: 17
dowhile (55)
    on left: 25, on right: 18
if (56)
    on left: 26 27 28 29 30, on right: 20
for (57)
    on left: 31 32, on right: 19
return (58)
    on left: 33 34, on right: 21
exprstmt (59)
    on left: 35, on right: 22
funbody (60)
    on left: 36 37 38 39 40 41 42, on right: 46 47 48 49
fundefs (61)
    on left: 43 44, on right: 37 39 41 42 44
fundef (62)
    on left: 45 46 47 48 49 50 51 52 53, on right: 6 43 44 45
param (63)
    on left: 54 55 56 57, on right: 48 49 52 53 54 57
ids (64)
    on left: 58 59, on right: 8 56 57 59
vardec (65)
    on left: 60 61 62 63 64 65 66 67, on right: 36 37 38 42 60 61 62
    63
varlet (66)
    on left: 68 69, on right: 23
exprs (67)
    on left: 70 71, on right: 12 13 31 32 62 63 66 67 68 70 95 97
expr (68)
    on left: 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89
    90 91 92 93, on right: 11 13 23 24 25 26 27 28 29 30 31 32 33 35
    61 63 65 67 70 71 73 76 77 79 80 81 82 83 84 85 86 87 88 89 90
    91 94
cast (69)
    on left: 94, on right: 78
funcall (70)
    on left: 95 96, on right: 75
arrexpr (71)
    on left: 97, on right: 92 93
var (72)
    on left: 98, on right: 74
constant (73)
    on left: 99 100 101, on right: 72
floatval (74)
    on left: 102, on right: 99
intval (75)
    on left: 103, on right: 100
boolval (76)
    on left: 104 105, on right: 101
type (77)
    on left: 106 107 108, on right: 7 8 10 11 12 13 46 48 50 52 54
    55 56 57 60 61 62 63 64 65 66 67 94


State 0

    0 $accept: . program $end

    EXTERN  shift, and go to state 1
    EXPORT  shift, and go to state 2
    VOID    shift, and go to state 3
    INT     shift, and go to state 4
    FLT     shift, and go to state 5
    BOOL    shift, and go to state 6

    program       go to state 7
    declarations  go to state 8
    decl          go to state 9
    globaldec     go to state 10
    globaldef     go to state 11
    fundef        go to state 12
    type          go to state 13


State 1

    7 globaldec: EXTERN . type ID SEMICOLON
    8          | EXTERN . type ID STRAIGHT_BRACKET_L ids STRAIGHT_BRACKET_R SEMICOLON

    INT   shift, and go to state 4
    FLT   shift, and go to state 5
    BOOL  shift, and go to state 6

    type  go to state 14


State 2

    9 globaldef: EXPORT . globaldef
   45 fundef: EXPORT . fundef

    EXPORT  shift, and go to state 2
    VOID    shift, and go to state 3
    INT     shift, and go to state 4
    FLT     shift, and go to state 5
    BOOL    shift, and go to state 6

    globaldef  go to state 15
    fundef     go to state 16
    type       go to state 13


State 3

   47 fundef: VOID . ID BRACKET_L BRACKET_R CURLY_BRACKET_L funbody CURLY_BRACKET_R
   49       | VOID . ID BRACKET_L param BRACKET_R CURLY_BRACKET_L funbody CURLY_BRACKET_R
   51       | VOID . ID BRACKET_L BRACKET_R CURLY_BRACKET_L CURLY_BRACKET_R
   53       | VOID . ID BRACKET_L param BRACKET_R CURLY_BRACKET_L CURLY_BRACKET_R

    ID  shift, and go to state 17


State 4

  106 type: INT .

    $default  reduce using rule 106 (type)


State 5

  107 type: FLT .

    $default  reduce using rule 107 (type)


State 6

  108 type: BOOL .

    $default  reduce using rule 108 (type)


State 7

    0 $accept: program . $end

    $end  shift, and go to state 18


State 8

    1 program: declarations .

    $default  reduce using rule 1 (program)


State 9

    2 declarations: decl . declarations
    3             | decl .

    EXTERN  shift, and go to state 1
    EXPORT  shift, and go to state 2
    VOID    shift, and go to state 3
    INT     shift, and go to state 4
    FLT     shift, and go to state 5
    BOOL    shift, and go to state 6

    $default  reduce using rule 3 (declarations)

    declarations  go to state 19
    decl          go to state 9
    globaldec     go to state 10
    globaldef     go to state 11
    fundef        go to state 12
    type          go to state 13


State 10

    4 decl: globaldec .

    $default  reduce using rule 4 (decl)


State 11

    5 decl: globaldef .

    $default  reduce using rule 5 (decl)


State 12

    6 decl: fundef .

    $default  reduce using rule 6 (decl)


State 13

   10 globaldef: type . ID SEMICOLON
   11          | type . ID LET expr SEMICOLON
   12          | type . ID exprs SEMICOLON
   13          | type . ID exprs LET expr SEMICOLON
   46 fundef: type . ID BRACKET_L BRACKET_R CURLY_BRACKET_L funbody CURLY_BRACKET_R
   48       | type . ID BRACKET_L param BRACKET_R CURLY_BRACKET_L funbody CURLY_BRACKET_R
   50       | type . ID BRACKET_L BRACKET_R CURLY_BRACKET_L CURLY_BRACKET_R
   52       | type . ID BRACKET_L param BRACKET_R CURLY_BRACKET_L CURLY_BRACKET_R

    ID  shift, and go to state 20


State 14

    7 globaldec: EXTERN type . ID SEMICOLON
    8          | EXTERN type . ID STRAIGHT_BRACKET_L ids STRAIGHT_BRACKET_R SEMICOLON

    ID  shift, and go to state 21


State 15

    9 globaldef: EXPORT globaldef .

    $default  reduce using rule 9 (globaldef)


State 16

   45 fundef: EXPORT fundef .

    $default  reduce using rule 45 (fundef)


State 17

   47 fundef: VOID ID . BRACKET_L BRACKET_R CURLY_BRACKET_L funbody CURLY_BRACKET_R
   49       | VOID ID . BRACKET_L param BRACKET_R CURLY_BRACKET_L funbody CURLY_BRACKET_R
   51       | VOID ID . BRACKET_L BRACKET_R CURLY_BRACKET_L CURLY_BRACKET_R
   53       | VOID ID . BRACKET_L param BRACKET_R CURLY_BRACKET_L CURLY_BRACKET_R

    BRACKET_L  shift, and go to state 22


State 18

    0 $accept: program $end .

    $default  accept


State 19

    2 declarations: decl declarations .

    $default  reduce using rule 2 (declarations)


State 20

   10 globaldef: type ID . SEMICOLON
   11          | type ID . LET expr SEMICOLON
   12          | type ID . exprs SEMICOLON
   13          | type ID . exprs LET expr SEMICOLON
   46 fundef: type ID . BRACKET_L BRACKET_R CURLY_BRACKET_L funbody CURLY_BRACKET_R
   48       | type ID . BRACKET_L param BRACKET_R CURLY_BRACKET_L funbody CURLY_BRACKET_R
   50       | type ID . BRACKET_L BRACKET_R CURLY_BRACKET_L CURLY_BRACKET_R
   52       | type ID . BRACKET_L param BRACKET_R CURLY_BRACKET_L CURLY_BRACKET_R

    BRACKET_L           shift, and go to state 23
    STRAIGHT_BRACKET_L  shift, and go to state 24
    SEMICOLON           shift, and go to state 25
    MINUS               shift, and go to state 26
    TRUEVAL             shift, and go to state 27
    FALSEVAL            shift, and go to state 28
    LET                 shift, and go to state 29
    NOT                 shift, and go to state 30
    NUM                 shift, and go to state 31
    FLOAT               shift, and go to state 32
    ID                  shift, and go to state 33

    exprs     go to state 34
    expr      go to state 35
    cast      go to state 36
    funcall   go to state 37
    arrexpr   go to state 38
    var       go to state 39
    constant  go to state 40
    floatval  go to state 41
    intval    go to state 42
    boolval   go to state 43


State 21

    7 globaldec: EXTERN type ID . SEMICOLON
    8          | EXTERN type ID . STRAIGHT_BRACKET_L ids STRAIGHT_BRACKET_R SEMICOLON

    STRAIGHT_BRACKET_L  shift, and go to state 44
    SEMICOLON           shift, and go to state 45


State 22

   47 fundef: VOID ID BRACKET_L . BRACKET_R CURLY_BRACKET_L funbody CURLY_BRACKET_R
   49       | VOID ID BRACKET_L . param BRACKET_R CURLY_BRACKET_L funbody CURLY_BRACKET_R
   51       | VOID ID BRACKET_L . BRACKET_R CURLY_BRACKET_L CURLY_BRACKET_R
   53       | VOID ID BRACKET_L . param BRACKET_R CURLY_BRACKET_L CURLY_BRACKET_R

    BRACKET_R  shift, and go to state 46
    INT        shift, and go to state 4
    FLT        shift, and go to state 5
    BOOL       shift, and go to state 6

    param  go to state 47
    type   go to state 48


State 23

   46 fundef: type ID BRACKET_L . BRACKET_R CURLY_BRACKET_L funbody CURLY_BRACKET_R
   48       | type ID BRACKET_L . param BRACKET_R CURLY_BRACKET_L funbody CURLY_BRACKET_R
   50       | type ID BRACKET_L . BRACKET_R CURLY_BRACKET_L CURLY_BRACKET_R
   52       | type ID BRACKET_L . param BRACKET_R CURLY_BRACKET_L CURLY_BRACKET_R
   73 expr: BRACKET_L . expr BRACKET_R
   94 cast: BRACKET_L . type BRACKET_R expr

    BRACKET_L           shift, and go to state 49
    BRACKET_R           shift, and go to state 50
    STRAIGHT_BRACKET_L  shift, and go to state 24
    MINUS               shift, and go to state 26
    TRUEVAL             shift, and go to state 27
    FALSEVAL            shift, and go to state 28
    NOT                 shift, and go to state 30
    INT                 shift, and go to state 4
    FLT                 shift, and go to state 5
    BOOL                shift, and go to state 6
    NUM                 shift, and go to state 31
    FLOAT               shift, and go to state 32
    ID                  shift, and go to state 33

    param     go to state 51
    expr      go to state 52
    cast      go to state 36
    funcall   go to state 37
    arrexpr   go to state 38
    var       go to state 39
    constant  go to state 40
    floatval  go to state 41
    intval    go to state 42
    boolval   go to state 43
    type      go to state 53


State 24

   97 arrexpr: STRAIGHT_BRACKET_L . exprs STRAIGHT_BRACKET_R

    BRACKET_L           shift, and go to state 49
    STRAIGHT_BRACKET_L  shift, and go to state 24
    MINUS               shift, and go to state 26
    TRUEVAL             shift, and go to state 27
    FALSEVAL            shift, and go to state 28
    NOT                 shift, and go to state 30
    NUM                 shift, and go to state 31
    FLOAT               shift, and go to state 32
    ID                  shift, and go to state 33

    exprs     go to state 54
    expr      go to state 35
    cast      go to state 36
    funcall   go to state 37
    arrexpr   go to state 38
    var       go to state 39
    constant  go to state 40
    floatval  go to state 41
    intval    go to state 42
    boolval   go to state 43


State 25

   10 globaldef: type ID SEMICOLON .

    $default  reduce using rule 10 (globaldef)


State 26

   77 expr: MINUS . expr

    BRACKET_L           shift, and go to state 49
    STRAIGHT_BRACKET_L  shift, and go to state 24
    MINUS               shift, and go to state 26
    TRUEVAL             shift, and go to state 27
    FALSEVAL            shift, and go to state 28
    NOT                 shift, and go to state 30
    NUM                 shift, and go to state 31
    FLOAT               shift, and go to state 32
    ID                  shift, and go to state 33

    expr      go to state 55
    cast      go to state 36
    funcall   go to state 37
    arrexpr   go to state 38
    var       go to state 39
    constant  go to state 40
    floatval  go to state 41
    intval    go to state 42
    boolval   go to state 43


State 27

  104 boolval: TRUEVAL .

    $default  reduce using rule 104 (boolval)


State 28

  105 boolval: FALSEVAL .

    $default  reduce using rule 105 (boolval)


State 29

   11 globaldef: type ID LET . expr SEMICOLON

    BRACKET_L           shift, and go to state 49
    STRAIGHT_BRACKET_L  shift, and go to state 24
    MINUS               shift, and go to state 26
    TRUEVAL             shift, and go to state 27
    FALSEVAL            shift, and go to state 28
    NOT                 shift, and go to state 30
    NUM                 shift, and go to state 31
    FLOAT               shift, and go to state 32
    ID                  shift, and go to state 33

    expr      go to state 56
    cast      go to state 36
    funcall   go to state 37
    arrexpr   go to state 38
    var       go to state 39
    constant  go to state 40
    floatval  go to state 41
    intval    go to state 42
    boolval   go to state 43


State 30

   76 expr: NOT . expr

    BRACKET_L           shift, and go to state 49
    STRAIGHT_BRACKET_L  shift, and go to state 24
    MINUS               shift, and go to state 26
    TRUEVAL             shift, and go to state 27
    FALSEVAL            shift, and go to state 28
    NOT                 shift, and go to state 30
    NUM                 shift, and go to state 31
    FLOAT               shift, and go to state 32
    ID                  shift, and go to state 33

    expr      go to state 57
    cast      go to state 36
    funcall   go to state 37
    arrexpr   go to state 38
    var       go to state 39
    constant  go to state 40
    floatval  go to state 41
    intval    go to state 42
    boolval   go to state 43


State 31

  103 intval: NUM .

    $default  reduce using rule 103 (intval)


State 32

  102 floatval: FLOAT .

    $default  reduce using rule 102 (floatval)


State 33

   92 expr: ID . arrexpr
   95 funcall: ID . BRACKET_L exprs BRACKET_R
   96        | ID . BRACKET_L BRACKET_R
   98 var: ID .

    BRACKET_L           shift, and go to state 58
    STRAIGHT_BRACKET_L  shift, and go to state 24

    $default  reduce using rule 98 (var)

    arrexpr  go to state 59


State 34

   12 globaldef: type ID exprs . SEMICOLON
   13          | type ID exprs . LET expr SEMICOLON

    SEMICOLON  shift, and go to state 60
    LET        shift, and go to state 61


State 35

   70 exprs: expr . COMMA exprs
   71      | expr .
   79 expr: expr . PLUS expr
   80     | expr . MINUS expr
   81     | expr . STAR expr
   82     | expr . SLASH expr
   83     | expr . PERCENT expr
   84     | expr . LE expr
   85     | expr . LT expr
   86     | expr . GE expr
   87     | expr . GT expr
   88     | expr . EQ expr
   89     | expr . NE expr
   90     | expr . OR expr
   91     | expr . AND expr

    COMMA    shift, and go to state 62
    MINUS    shift, and go to state 63
    PLUS     shift, and go to state 64
    STAR     shift, and go to state 65
    SLASH    shift, and go to state 66
    PERCENT  shift, and go to state 67
    LE       shift, and go to state 68
    LT       shift, and go to state 69
    GE       shift, and go to state 70
    GT       shift, and go to state 71
    EQ       shift, and go to state 72
    NE       shift, and go to state 73
    OR       shift, and go to state 74
    AND      shift, and go to state 75

    $default  reduce using rule 71 (exprs)


State 36

   78 expr: cast .

    $default  reduce using rule 78 (expr)


State 37

   75 expr: funcall .

    $default  reduce using rule 75 (expr)


State 38

   93 expr: arrexpr .

    $default  reduce using rule 93 (expr)


State 39

   74 expr: var .

    $default  reduce using rule 74 (expr)


State 40

   72 expr: constant .

    $default  reduce using rule 72 (expr)


State 41

   99 constant: floatval .

    $default  reduce using rule 99 (constant)


State 42

  100 constant: intval .

    $default  reduce using rule 100 (constant)


State 43

  101 constant: boolval .

    $default  reduce using rule 101 (constant)


State 44

    8 globaldec: EXTERN type ID STRAIGHT_BRACKET_L . ids STRAIGHT_BRACKET_R SEMICOLON

    ID  shift, and go to state 76

    ids  go to state 77


State 45

    7 globaldec: EXTERN type ID SEMICOLON .

    $default  reduce using rule 7 (globaldec)


State 46

   47 fundef: VOID ID BRACKET_L BRACKET_R . CURLY_BRACKET_L funbody CURLY_BRACKET_R
   51       | VOID ID BRACKET_L BRACKET_R . CURLY_BRACKET_L CURLY_BRACKET_R

    CURLY_BRACKET_L  shift, and go to state 78


State 47

   49 fundef: VOID ID BRACKET_L param . BRACKET_R CURLY_BRACKET_L funbody CURLY_BRACKET_R
   53       | VOID ID BRACKET_L param . BRACKET_R CURLY_BRACKET_L CURLY_BRACKET_R

    BRACKET_R  shift, and go to state 79


State 48

   54 param: type . ID COMMA param
   55      | type . ID
   56      | type . STRAIGHT_BRACKET_L ids STRAIGHT_BRACKET_R ID
   57      | type . STRAIGHT_BRACKET_L ids STRAIGHT_BRACKET_R ID param

    STRAIGHT_BRACKET_L  shift, and go to state 80
    ID                  shift, and go to state 81


State 49

   73 expr: BRACKET_L . expr BRACKET_R
   94 cast: BRACKET_L . type BRACKET_R expr

    BRACKET_L           shift, and go to state 49
    STRAIGHT_BRACKET_L  shift, and go to state 24
    MINUS               shift, and go to state 26
    TRUEVAL             shift, and go to state 27
    FALSEVAL            shift, and go to state 28
    NOT                 shift, and go to state 30
    INT                 shift, and go to state 4
    FLT                 shift, and go to state 5
    BOOL                shift, and go to state 6
    NUM                 shift, and go to state 31
    FLOAT               shift, and go to state 32
    ID                  shift, and go to state 33

    expr      go to state 52
    cast      go to state 36
    funcall   go to state 37
    arrexpr   go to state 38
    var       go to state 39
    constant  go to state 40
    floatval  go to state 41
    intval    go to state 42
    boolval   go to state 43
    type      go to state 82


State 50

   46 fundef: type ID BRACKET_L BRACKET_R . CURLY_BRACKET_L funbody CURLY_BRACKET_R
   50       | type ID BRACKET_L BRACKET_R . CURLY_BRACKET_L CURLY_BRACKET_R

    CURLY_BRACKET_L  shift, and go to state 83


State 51

   48 fundef: type ID BRACKET_L param . BRACKET_R CURLY_BRACKET_L funbody CURLY_BRACKET_R
   52       | type ID BRACKET_L param . BRACKET_R CURLY_BRACKET_L CURLY_BRACKET_R

    BRACKET_R  shift, and go to state 84


State 52

   73 expr: BRACKET_L expr . BRACKET_R
   79     | expr . PLUS expr
   80     | expr . MINUS expr
   81     | expr . STAR expr
   82     | expr . SLASH expr
   83     | expr . PERCENT expr
   84     | expr . LE expr
   85     | expr . LT expr
   86     | expr . GE expr
   87     | expr . GT expr
   88     | expr . EQ expr
   89     | expr . NE expr
   90     | expr . OR expr
   91     | expr . AND expr

    BRACKET_R  shift, and go to state 85
    MINUS      shift, and go to state 63
    PLUS       shift, and go to state 64
    STAR       shift, and go to state 65
    SLASH      shift, and go to state 66
    PERCENT    shift, and go to state 67
    LE         shift, and go to state 68
    LT         shift, and go to state 69
    GE         shift, and go to state 70
    GT         shift, and go to state 71
    EQ         shift, and go to state 72
    NE         shift, and go to state 73
    OR         shift, and go to state 74
    AND        shift, and go to state 75


State 53

   54 param: type . ID COMMA param
   55      | type . ID
   56      | type . STRAIGHT_BRACKET_L ids STRAIGHT_BRACKET_R ID
   57      | type . STRAIGHT_BRACKET_L ids STRAIGHT_BRACKET_R ID param
   94 cast: BRACKET_L type . BRACKET_R expr

    BRACKET_R           shift, and go to state 86
    STRAIGHT_BRACKET_L  shift, and go to state 80
    ID                  shift, and go to state 81


State 54

   97 arrexpr: STRAIGHT_BRACKET_L exprs . STRAIGHT_BRACKET_R

    STRAIGHT_BRACKET_R  shift, and go to state 87


State 55

   77 expr: MINUS expr .
   79     | expr . PLUS expr
   80     | expr . MINUS expr
   81     | expr . STAR expr
   82     | expr . SLASH expr
   83     | expr . PERCENT expr
   84     | expr . LE expr
   85     | expr . LT expr
   86     | expr . GE expr
   87     | expr . GT expr
   88     | expr . EQ expr
   89     | expr . NE expr
   90     | expr . OR expr
   91     | expr . AND expr

    $default  reduce using rule 77 (expr)


State 56

   11 globaldef: type ID LET expr . SEMICOLON
   79 expr: expr . PLUS expr
   80     | expr . MINUS expr
   81     | expr . STAR expr
   82     | expr . SLASH expr
   83     | expr . PERCENT expr
   84     | expr . LE expr
   85     | expr . LT expr
   86     | expr . GE expr
   87     | expr . GT expr
   88     | expr . EQ expr
   89     | expr . NE expr
   90     | expr . OR expr
   91     | expr . AND expr

    SEMICOLON  shift, and go to state 88
    MINUS      shift, and go to state 63
    PLUS       shift, and go to state 64
    STAR       shift, and go to state 65
    SLASH      shift, and go to state 66
    PERCENT    shift, and go to state 67
    LE         shift, and go to state 68
    LT         shift, and go to state 69
    GE         shift, and go to state 70
    GT         shift, and go to state 71
    EQ         shift, and go to state 72
    NE         shift, and go to state 73
    OR         shift, and go to state 74
    AND        shift, and go to state 75


State 57

   76 expr: NOT expr .
   79     | expr . PLUS expr
   80     | expr . MINUS expr
   81     | expr . STAR expr
   82     | expr . SLASH expr
   83     | expr . PERCENT expr
   84     | expr . LE expr
   85     | expr . LT expr
   86     | expr . GE expr
   87     | expr . GT expr
   88     | expr . EQ expr
   89     | expr . NE expr
   90     | expr . OR expr
   91     | expr . AND expr

    $default  reduce using rule 76 (expr)


State 58

   95 funcall: ID BRACKET_L . exprs BRACKET_R
   96        | ID BRACKET_L . BRACKET_R

    BRACKET_L           shift, and go to state 49
    BRACKET_R           shift, and go to state 89
    STRAIGHT_BRACKET_L  shift, and go to state 24
    MINUS               shift, and go to state 26
    TRUEVAL             shift, and go to state 27
    FALSEVAL            shift, and go to state 28
    NOT                 shift, and go to state 30
    NUM                 shift, and go to state 31
    FLOAT               shift, and go to state 32
    ID                  shift, and go to state 33

    exprs     go to state 90
    expr      go to state 35
    cast      go to state 36
    funcall   go to state 37
    arrexpr   go to state 38
    var       go to state 39
    constant  go to state 40
    floatval  go to state 41
    intval    go to state 42
    boolval   go to state 43


State 59

   92 expr: ID arrexpr .

    $default  reduce using rule 92 (expr)


State 60

   12 globaldef: type ID exprs SEMICOLON .

    $default  reduce using rule 12 (globaldef)


State 61

   13 globaldef: type ID exprs LET . expr SEMICOLON

    BRACKET_L           shift, and go to state 49
    STRAIGHT_BRACKET_L  shift, and go to state 24
    MINUS               shift, and go to state 26
    TRUEVAL             shift, and go to state 27
    FALSEVAL            shift, and go to state 28
    NOT                 shift, and go to state 30
    NUM                 shift, and go to state 31
    FLOAT               shift, and go to state 32
    ID                  shift, and go to state 33

    expr      go to state 91
    cast      go to state 36
    funcall   go to state 37
    arrexpr   go to state 38
    var       go to state 39
    constant  go to state 40
    floatval  go to state 41
    intval    go to state 42
    boolval   go to state 43


State 62

   70 exprs: expr COMMA . exprs

    BRACKET_L           shift, and go to state 49
    STRAIGHT_BRACKET_L  shift, and go to state 24
    MINUS               shift, and go to state 26
    TRUEVAL             shift, and go to state 27
    FALSEVAL            shift, and go to state 28
    NOT                 shift, and go to state 30
    NUM                 shift, and go to state 31
    FLOAT               shift, and go to state 32
    ID                  shift, and go to state 33

    exprs     go to state 92
    expr      go to state 35
    cast      go to state 36
    funcall   go to state 37
    arrexpr   go to state 38
    var       go to state 39
    constant  go to state 40
    floatval  go to state 41
    intval    go to state 42
    boolval   go to state 43


State 63

   80 expr: expr MINUS . expr

    BRACKET_L           shift, and go to state 49
    STRAIGHT_BRACKET_L  shift, and go to state 24
    MINUS               shift, and go to state 26
    TRUEVAL             shift, and go to state 27
    FALSEVAL            shift, and go to state 28
    NOT                 shift, and go to state 30
    NUM                 shift, and go to state 31
    FLOAT               shift, and go to state 32
    ID                  shift, and go to state 33

    expr      go to state 93
    cast      go to state 36
    funcall   go to state 37
    arrexpr   go to state 38
    var       go to state 39
    constant  go to state 40
    floatval  go to state 41
    intval    go to state 42
    boolval   go to state 43


State 64

   79 expr: expr PLUS . expr

    BRACKET_L           shift, and go to state 49
    STRAIGHT_BRACKET_L  shift, and go to state 24
    MINUS               shift, and go to state 26
    TRUEVAL             shift, and go to state 27
    FALSEVAL            shift, and go to state 28
    NOT                 shift, and go to state 30
    NUM                 shift, and go to state 31
    FLOAT               shift, and go to state 32
    ID                  shift, and go to state 33

    expr      go to state 94
    cast      go to state 36
    funcall   go to state 37
    arrexpr   go to state 38
    var       go to state 39
    constant  go to state 40
    floatval  go to state 41
    intval    go to state 42
    boolval   go to state 43


State 65

   81 expr: expr STAR . expr

    BRACKET_L           shift, and go to state 49
    STRAIGHT_BRACKET_L  shift, and go to state 24
    MINUS               shift, and go to state 26
    TRUEVAL             shift, and go to state 27
    FALSEVAL            shift, and go to state 28
    NOT                 shift, and go to state 30
    NUM                 shift, and go to state 31
    FLOAT               shift, and go to state 32
    ID                  shift, and go to state 33

    expr      go to state 95
    cast      go to state 36
    funcall   go to state 37
    arrexpr   go to state 38
    var       go to state 39
    constant  go to state 40
    floatval  go to state 41
    intval    go to state 42
    boolval   go to state 43


State 66

   82 expr: expr SLASH . expr

    BRACKET_L           shift, and go to state 49
    STRAIGHT_BRACKET_L  shift, and go to state 24
    MINUS               shift, and go to state 26
    TRUEVAL             shift, and go to state 27
    FALSEVAL            shift, and go to state 28
    NOT                 shift, and go to state 30
    NUM                 shift, and go to state 31
    FLOAT               shift, and go to state 32
    ID                  shift, and go to state 33

    expr      go to state 96
    cast      go to state 36
    funcall   go to state 37
    arrexpr   go to state 38
    var       go to state 39
    constant  go to state 40
    floatval  go to state 41
    intval    go to state 42
    boolval   go to state 43


State 67

   83 expr: expr PERCENT . expr

    BRACKET_L           shift, and go to state 49
    STRAIGHT_BRACKET_L  shift, and go to state 24
    MINUS               shift, and go to state 26
    TRUEVAL             shift, and go to state 27
    FALSEVAL            shift, and go to state 28
    NOT                 shift, and go to state 30
    NUM                 shift, and go to state 31
    FLOAT               shift, and go to state 32
    ID                  shift, and go to state 33

    expr      go to state 97
    cast      go to state 36
    funcall   go to state 37
    arrexpr   go to state 38
    var       go to state 39
    constant  go to state 40
    floatval  go to state 41
    intval    go to state 42
    boolval   go to state 43


State 68

   84 expr: expr LE . expr

    BRACKET_L           shift, and go to state 49
    STRAIGHT_BRACKET_L  shift, and go to state 24
    MINUS               shift, and go to state 26
    TRUEVAL             shift, and go to state 27
    FALSEVAL            shift, and go to state 28
    NOT                 shift, and go to state 30
    NUM                 shift, and go to state 31
    FLOAT               shift, and go to state 32
    ID                  shift, and go to state 33

    expr      go to state 98
    cast      go to state 36
    funcall   go to state 37
    arrexpr   go to state 38
    var       go to state 39
    constant  go to state 40
    floatval  go to state 41
    intval    go to state 42
    boolval   go to state 43


State 69

   85 expr: expr LT . expr

    BRACKET_L           shift, and go to state 49
    STRAIGHT_BRACKET_L  shift, and go to state 24
    MINUS               shift, and go to state 26
    TRUEVAL             shift, and go to state 27
    FALSEVAL            shift, and go to state 28
    NOT                 shift, and go to state 30
    NUM                 shift, and go to state 31
    FLOAT               shift, and go to state 32
    ID                  shift, and go to state 33

    expr      go to state 99
    cast      go to state 36
    funcall   go to state 37
    arrexpr   go to state 38
    var       go to state 39
    constant  go to state 40
    floatval  go to state 41
    intval    go to state 42
    boolval   go to state 43


State 70

   86 expr: expr GE . expr

    BRACKET_L           shift, and go to state 49
    STRAIGHT_BRACKET_L  shift, and go to state 24
    MINUS               shift, and go to state 26
    TRUEVAL             shift, and go to state 27
    FALSEVAL            shift, and go to state 28
    NOT                 shift, and go to state 30
    NUM                 shift, and go to state 31
    FLOAT               shift, and go to state 32
    ID                  shift, and go to state 33

    expr      go to state 100
    cast      go to state 36
    funcall   go to state 37
    arrexpr   go to state 38
    var       go to state 39
    constant  go to state 40
    floatval  go to state 41
    intval    go to state 42
    boolval   go to state 43


State 71

   87 expr: expr GT . expr

    BRACKET_L           shift, and go to state 49
    STRAIGHT_BRACKET_L  shift, and go to state 24
    MINUS               shift, and go to state 26
    TRUEVAL             shift, and go to state 27
    FALSEVAL            shift, and go to state 28
    NOT                 shift, and go to state 30
    NUM                 shift, and go to state 31
    FLOAT               shift, and go to state 32
    ID                  shift, and go to state 33

    expr      go to state 101
    cast      go to state 36
    funcall   go to state 37
    arrexpr   go to state 38
    var       go to state 39
    constant  go to state 40
    floatval  go to state 41
    intval    go to state 42
    boolval   go to state 43


State 72

   88 expr: expr EQ . expr

    BRACKET_L           shift, and go to state 49
    STRAIGHT_BRACKET_L  shift, and go to state 24
    MINUS               shift, and go to state 26
    TRUEVAL             shift, and go to state 27
    FALSEVAL            shift, and go to state 28
    NOT                 shift, and go to state 30
    NUM                 shift, and go to state 31
    FLOAT               shift, and go to state 32
    ID                  shift, and go to state 33

    expr      go to state 102
    cast      go to state 36
    funcall   go to state 37
    arrexpr   go to state 38
    var       go to state 39
    constant  go to state 40
    floatval  go to state 41
    intval    go to state 42
    boolval   go to state 43


State 73

   89 expr: expr NE . expr

    BRACKET_L           shift, and go to state 49
    STRAIGHT_BRACKET_L  shift, and go to state 24
    MINUS               shift, and go to state 26
    TRUEVAL             shift, and go to state 27
    FALSEVAL            shift, and go to state 28
    NOT                 shift, and go to state 30
    NUM                 shift, and go to state 31
    FLOAT               shift, and go to state 32
    ID                  shift, and go to state 33

    expr      go to state 103
    cast      go to state 36
    funcall   go to state 37
    arrexpr   go to state 38
    var       go to state 39
    constant  go to state 40
    floatval  go to state 41
    intval    go to state 42
    boolval   go to state 43


State 74

   90 expr: expr OR . expr

    BRACKET_L           shift, and go to state 49
    STRAIGHT_BRACKET_L  shift, and go to state 24
    MINUS               shift, and go to state 26
    TRUEVAL             shift, and go to state 27
    FALSEVAL            shift, and go to state 28
    NOT                 shift, and go to state 30
    NUM                 shift, and go to state 31
    FLOAT               shift, and go to state 32
    ID                  shift, and go to state 33

    expr      go to state 104
    cast      go to state 36
    funcall   go to state 37
    arrexpr   go to state 38
    var       go to state 39
    constant  go to state 40
    floatval  go to state 41
    intval    go to state 42
    boolval   go to state 43


State 75

   91 expr: expr AND . expr

    BRACKET_L           shift, and go to state 49
    STRAIGHT_BRACKET_L  shift, and go to state 24
    MINUS               shift, and go to state 26
    TRUEVAL             shift, and go to state 27
    FALSEVAL            shift, and go to state 28
    NOT                 shift, and go to state 30
    NUM                 shift, and go to state 31
    FLOAT               shift, and go to state 32
    ID                  shift, and go to state 33

    expr      go to state 105
    cast      go to state 36
    funcall   go to state 37
    arrexpr   go to state 38
    var       go to state 39
    constant  go to state 40
    floatval  go to state 41
    intval    go to state 42
    boolval   go to state 43


State 76

   58 ids: ID .
   59    | ID . COMMA ids

    COMMA  shift, and go to state 106

    $default  reduce using rule 58 (ids)


State 77

    8 globaldec: EXTERN type ID STRAIGHT_BRACKET_L ids . STRAIGHT_BRACKET_R SEMICOLON

    STRAIGHT_BRACKET_R  shift, and go to state 107


State 78

   47 fundef: VOID ID BRACKET_L BRACKET_R CURLY_BRACKET_L . funbody CURLY_BRACKET_R
   51       | VOID ID BRACKET_L BRACKET_R CURLY_BRACKET_L . CURLY_BRACKET_R

    CURLY_BRACKET_R  shift, and go to state 108
    IF               shift, and go to state 109
    WHILE            shift, and go to state 110
    DO               shift, and go to state 111
    FOR              shift, and go to state 112
    RETURN           shift, and go to state 113
    EXPORT           shift, and go to state 114
    VOID             shift, and go to state 3
    INT              shift, and go to state 4
    FLT              shift, and go to state 5
    BOOL             shift, and go to state 6
    ID               shift, and go to state 115

    stmts     go to state 116
    stmt      go to state 117
    assign    go to state 118
    while     go to state 119
    dowhile   go to state 120
    if        go to state 121
    for       go to state 122
    return    go to state 123
    exprstmt  go to state 124
    funbody   go to state 125
    fundefs   go to state 126
    fundef    go to state 127
    vardec    go to state 128
    varlet    go to state 129
    type      go to state 130


State 79

   49 fundef: VOID ID BRACKET_L param BRACKET_R . CURLY_BRACKET_L funbody CURLY_BRACKET_R
   53       | VOID ID BRACKET_L param BRACKET_R . CURLY_BRACKET_L CURLY_BRACKET_R

    CURLY_BRACKET_L  shift, and go to state 131


State 80

   56 param: type STRAIGHT_BRACKET_L . ids STRAIGHT_BRACKET_R ID
   57      | type STRAIGHT_BRACKET_L . ids STRAIGHT_BRACKET_R ID param

    ID  shift, and go to state 76

    ids  go to state 132


State 81

   54 param: type ID . COMMA param
   55      | type ID .

    COMMA  shift, and go to state 133

    $default  reduce using rule 55 (param)


State 82

   94 cast: BRACKET_L type . BRACKET_R expr

    BRACKET_R  shift, and go to state 86


State 83

   46 fundef: type ID BRACKET_L BRACKET_R CURLY_BRACKET_L . funbody CURLY_BRACKET_R
   50       | type ID BRACKET_L BRACKET_R CURLY_BRACKET_L . CURLY_BRACKET_R

    CURLY_BRACKET_R  shift, and go to state 134
    IF               shift, and go to state 109
    WHILE            shift, and go to state 110
    DO               shift, and go to state 111
    FOR              shift, and go to state 112
    RETURN           shift, and go to state 113
    EXPORT           shift, and go to state 114
    VOID             shift, and go to state 3
    INT              shift, and go to state 4
    FLT              shift, and go to state 5
    BOOL             shift, and go to state 6
    ID               shift, and go to state 115

    stmts     go to state 116
    stmt      go to state 117
    assign    go to state 118
    while     go to state 119
    dowhile   go to state 120
    if        go to state 121
    for       go to state 122
    return    go to state 123
    exprstmt  go to state 124
    funbody   go to state 135
    fundefs   go to state 126
    fundef    go to state 127
    vardec    go to state 128
    varlet    go to state 129
    type      go to state 130


State 84

   48 fundef: type ID BRACKET_L param BRACKET_R . CURLY_BRACKET_L funbody CURLY_BRACKET_R
   52       | type ID BRACKET_L param BRACKET_R . CURLY_BRACKET_L CURLY_BRACKET_R

    CURLY_BRACKET_L  shift, and go to state 136


State 85

   73 expr: BRACKET_L expr BRACKET_R .

    $default  reduce using rule 73 (expr)


State 86

   94 cast: BRACKET_L type BRACKET_R . expr

    BRACKET_L           shift, and go to state 49
    STRAIGHT_BRACKET_L  shift, and go to state 24
    MINUS               shift, and go to state 26
    TRUEVAL             shift, and go to state 27
    FALSEVAL            shift, and go to state 28
    NOT                 shift, and go to state 30
    NUM                 shift, and go to state 31
    FLOAT               shift, and go to state 32
    ID                  shift, and go to state 33

    expr      go to state 137
    cast      go to state 36
    funcall   go to state 37
    arrexpr   go to state 38
    var       go to state 39
    constant  go to state 40
    floatval  go to state 41
    intval    go to state 42
    boolval   go to state 43


State 87

   97 arrexpr: STRAIGHT_BRACKET_L exprs STRAIGHT_BRACKET_R .

    $default  reduce using rule 97 (arrexpr)


State 88

   11 globaldef: type ID LET expr SEMICOLON .

    $default  reduce using rule 11 (globaldef)


State 89

   96 funcall: ID BRACKET_L BRACKET_R .

    $default  reduce using rule 96 (funcall)


State 90

   95 funcall: ID BRACKET_L exprs . BRACKET_R

    BRACKET_R  shift, and go to state 138


State 91

   13 globaldef: type ID exprs LET expr . SEMICOLON
   79 expr: expr . PLUS expr
   80     | expr . MINUS expr
   81     | expr . STAR expr
   82     | expr . SLASH expr
   83     | expr . PERCENT expr
   84     | expr . LE expr
   85     | expr . LT expr
   86     | expr . GE expr
   87     | expr . GT expr
   88     | expr . EQ expr
   89     | expr . NE expr
   90     | expr . OR expr
   91     | expr . AND expr

    SEMICOLON  shift, and go to state 139
    MINUS      shift, and go to state 63
    PLUS       shift, and go to state 64
    STAR       shift, and go to state 65
    SLASH      shift, and go to state 66
    PERCENT    shift, and go to state 67
    LE         shift, and go to state 68
    LT         shift, and go to state 69
    GE         shift, and go to state 70
    GT         shift, and go to state 71
    EQ         shift, and go to state 72
    NE         shift, and go to state 73
    OR         shift, and go to state 74
    AND        shift, and go to state 75


State 92

   70 exprs: expr COMMA exprs .

    $default  reduce using rule 70 (exprs)


State 93

   79 expr: expr . PLUS expr
   80     | expr . MINUS expr
   80     | expr MINUS expr .
   81     | expr . STAR expr
   82     | expr . SLASH expr
   83     | expr . PERCENT expr
   84     | expr . LE expr
   85     | expr . LT expr
   86     | expr . GE expr
   87     | expr . GT expr
   88     | expr . EQ expr
   89     | expr . NE expr
   90     | expr . OR expr
   91     | expr . AND expr

    STAR     shift, and go to state 65
    SLASH    shift, and go to state 66
    PERCENT  shift, and go to state 67

    $default  reduce using rule 80 (expr)


State 94

   79 expr: expr . PLUS expr
   79     | expr PLUS expr .
   80     | expr . MINUS expr
   81     | expr . STAR expr
   82     | expr . SLASH expr
   83     | expr . PERCENT expr
   84     | expr . LE expr
   85     | expr . LT expr
   86     | expr . GE expr
   87     | expr . GT expr
   88     | expr . EQ expr
   89     | expr . NE expr
   90     | expr . OR expr
   91     | expr . AND expr

    STAR     shift, and go to state 65
    SLASH    shift, and go to state 66
    PERCENT  shift, and go to state 67

    $default  reduce using rule 79 (expr)


State 95

   79 expr: expr . PLUS expr
   80     | expr . MINUS expr
   81     | expr . STAR expr
   81     | expr STAR expr .
   82     | expr . SLASH expr
   83     | expr . PERCENT expr
   84     | expr . LE expr
   85     | expr . LT expr
   86     | expr . GE expr
   87     | expr . GT expr
   88     | expr . EQ expr
   89     | expr . NE expr
   90     | expr . OR expr
   91     | expr . AND expr

    $default  reduce using rule 81 (expr)


State 96

   79 expr: expr . PLUS expr
   80     | expr . MINUS expr
   81     | expr . STAR expr
   82     | expr . SLASH expr
   82     | expr SLASH expr .
   83     | expr . PERCENT expr
   84     | expr . LE expr
   85     | expr . LT expr
   86     | expr . GE expr
   87     | expr . GT expr
   88     | expr . EQ expr
   89     | expr . NE expr
   90     | expr . OR expr
   91     | expr . AND expr

    $default  reduce using rule 82 (expr)


State 97

   79 expr: expr . PLUS expr
   80     | expr . MINUS expr
   81     | expr . STAR expr
   82     | expr . SLASH expr
   83     | expr . PERCENT expr
   83     | expr PERCENT expr .
   84     | expr . LE expr
   85     | expr . LT expr
   86     | expr . GE expr
   87     | expr . GT expr
   88     | expr . EQ expr
   89     | expr . NE expr
   90     | expr . OR expr
   91     | expr . AND expr

    $default  reduce using rule 83 (expr)


State 98

   79 expr: expr . PLUS expr
   80     | expr . MINUS expr
   81     | expr . STAR expr
   82     | expr . SLASH expr
   83     | expr . PERCENT expr
   84     | expr . LE expr
   84     | expr LE expr .
   85     | expr . LT expr
   86     | expr . GE expr
   87     | expr . GT expr
   88     | expr . EQ expr
   89     | expr . NE expr
   90     | expr . OR expr
   91     | expr . AND expr

    MINUS    shift, and go to state 63
    PLUS     shift, and go to state 64
    STAR     shift, and go to state 65
    SLASH    shift, and go to state 66
    PERCENT  shift, and go to state 67

    $default  reduce using rule 84 (expr)


State 99

   79 expr: expr . PLUS expr
   80     | expr . MINUS expr
   81     | expr . STAR expr
   82     | expr . SLASH expr
   83     | expr . PERCENT expr
   84     | expr . LE expr
   85     | expr . LT expr
   85     | expr LT expr .
   86     | expr . GE expr
   87     | expr . GT expr
   88     | expr . EQ expr
   89     | expr . NE expr
   90     | expr . OR expr
   91     | expr . AND expr

    MINUS    shift, and go to state 63
    PLUS     shift, and go to state 64
    STAR     shift, and go to state 65
    SLASH    shift, and go to state 66
    PERCENT  shift, and go to state 67

    $default  reduce using rule 85 (expr)


State 100

   79 expr: expr . PLUS expr
   80     | expr . MINUS expr
   81     | expr . STAR expr
   82     | expr . SLASH expr
   83     | expr . PERCENT expr
   84     | expr . LE expr
   85     | expr . LT expr
   86     | expr . GE expr
   86     | expr GE expr .
   87     | expr . GT expr
   88     | expr . EQ expr
   89     | expr . NE expr
   90     | expr . OR expr
   91     | expr . AND expr

    MINUS    shift, and go to state 63
    PLUS     shift, and go to state 64
    STAR     shift, and go to state 65
    SLASH    shift, and go to state 66
    PERCENT  shift, and go to state 67

    $default  reduce using rule 86 (expr)


State 101

   79 expr: expr . PLUS expr
   80     | expr . MINUS expr
   81     | expr . STAR expr
   82     | expr . SLASH expr
   83     | expr . PERCENT expr
   84     | expr . LE expr
   85     | expr . LT expr
   86     | expr . GE expr
   87     | expr . GT expr
   87     | expr GT expr .
   88     | expr . EQ expr
   89     | expr . NE expr
   90     | expr . OR expr
   91     | expr . AND expr

    MINUS    shift, and go to state 63
    PLUS     shift, and go to state 64
    STAR     shift, and go to state 65
    SLASH    shift, and go to state 66
    PERCENT  shift, and go to state 67

    $default  reduce using rule 87 (expr)


State 102

   79 expr: expr . PLUS expr
   80     | expr . MINUS expr
   81     | expr . STAR expr
   82     | expr . SLASH expr
   83     | expr . PERCENT expr
   84     | expr . LE expr
   85     | expr . LT expr
   86     | expr . GE expr
   87     | expr . GT expr
   88     | expr . EQ expr
   88     | expr EQ expr .
   89     | expr . NE expr
   90     | expr . OR expr
   91     | expr . AND expr

    MINUS    shift, and go to state 63
    PLUS     shift, and go to state 64
    STAR     shift, and go to state 65
    SLASH    shift, and go to state 66
    PERCENT  shift, and go to state 67
    LE       shift, and go to state 68
    LT       shift, and go to state 69
    GE       shift, and go to state 70
    GT       shift, and go to state 71

    $default  reduce using rule 88 (expr)


State 103

   79 expr: expr . PLUS expr
   80     | expr . MINUS expr
   81     | expr . STAR expr
   82     | expr . SLASH expr
   83     | expr . PERCENT expr
   84     | expr . LE expr
   85     | expr . LT expr
   86     | expr . GE expr
   87     | expr . GT expr
   88     | expr . EQ expr
   89     | expr . NE expr
   89     | expr NE expr .
   90     | expr . OR expr
   91     | expr . AND expr

    MINUS    shift, and go to state 63
    PLUS     shift, and go to state 64
    STAR     shift, and go to state 65
    SLASH    shift, and go to state 66
    PERCENT  shift, and go to state 67
    LE       shift, and go to state 68
    LT       shift, and go to state 69
    GE       shift, and go to state 70
    GT       shift, and go to state 71

    $default  reduce using rule 89 (expr)


State 104

   79 expr: expr . PLUS expr
   80     | expr . MINUS expr
   81     | expr . STAR expr
   82     | expr . SLASH expr
   83     | expr . PERCENT expr
   84     | expr . LE expr
   85     | expr . LT expr
   86     | expr . GE expr
   87     | expr . GT expr
   88     | expr . EQ expr
   89     | expr . NE expr
   90     | expr . OR expr
   90     | expr OR expr .
   91     | expr . AND expr

    MINUS    shift, and go to state 63
    PLUS     shift, and go to state 64
    STAR     shift, and go to state 65
    SLASH    shift, and go to state 66
    PERCENT  shift, and go to state 67
    LE       shift, and go to state 68
    LT       shift, and go to state 69
    GE       shift, and go to state 70
    GT       shift, and go to state 71
    EQ       shift, and go to state 72
    NE       shift, and go to state 73
    AND      shift, and go to state 75

    $default  reduce using rule 90 (expr)


State 105

   79 expr: expr . PLUS expr
   80     | expr . MINUS expr
   81     | expr . STAR expr
   82     | expr . SLASH expr
   83     | expr . PERCENT expr
   84     | expr . LE expr
   85     | expr . LT expr
   86     | expr . GE expr
   87     | expr . GT expr
   88     | expr . EQ expr
   89     | expr . NE expr
   90     | expr . OR expr
   91     | expr . AND expr
   91     | expr AND expr .

    MINUS    shift, and go to state 63
    PLUS     shift, and go to state 64
    STAR     shift, and go to state 65
    SLASH    shift, and go to state 66
    PERCENT  shift, and go to state 67
    LE       shift, and go to state 68
    LT       shift, and go to state 69
    GE       shift, and go to state 70
    GT       shift, and go to state 71
    EQ       shift, and go to state 72
    NE       shift, and go to state 73

    $default  reduce using rule 91 (expr)


State 106

   59 ids: ID COMMA . ids

    ID  shift, and go to state 76

    ids  go to state 140


State 107

    8 globaldec: EXTERN type ID STRAIGHT_BRACKET_L ids STRAIGHT_BRACKET_R . SEMICOLON

    SEMICOLON  shift, and go to state 141


State 108

   51 fundef: VOID ID BRACKET_L BRACKET_R CURLY_BRACKET_L CURLY_BRACKET_R .

    $default  reduce using rule 51 (fundef)


State 109

   26 if: IF . BRACKET_L expr BRACKET_R stmt
   27   | IF . BRACKET_L expr BRACKET_R stmt ELSE stmt
   28   | IF . BRACKET_L expr BRACKET_R CURLY_BRACKET_L stmts CURLY_BRACKET_R ELSE CURLY_BRACKET_L stmts CURLY_BRACKET_R
   29   | IF . BRACKET_L expr BRACKET_R stmt ELSE CURLY_BRACKET_L stmts CURLY_BRACKET_R
   30   | IF . BRACKET_L expr BRACKET_R CURLY_BRACKET_L stmts CURLY_BRACKET_R ELSE stmt

    BRACKET_L  shift, and go to state 142


State 110

   24 while: WHILE . BRACKET_L expr BRACKET_R CURLY_BRACKET_L stmts CURLY_BRACKET_R

    BRACKET_L  shift, and go to state 143


State 111

   25 dowhile: DO . CURLY_BRACKET_L stmts CURLY_BRACKET_R WHILE BRACKET_L expr BRACKET_R SEMICOLON

    CURLY_BRACKET_L  shift, and go to state 144


State 112

   31 for: FOR . BRACKET_L INT ID LET expr COMMA expr COMMA expr BRACKET_R CURLY_BRACKET_L exprs CURLY_BRACKET_R
   32    | FOR . BRACKET_L INT ID LET expr COMMA expr BRACKET_R CURLY_BRACKET_R exprs CURLY_BRACKET_R

    BRACKET_L  shift, and go to state 145


State 113

   33 return: RETURN . expr SEMICOLON
   34       | RETURN . SEMICOLON

    BRACKET_L           shift, and go to state 49
    STRAIGHT_BRACKET_L  shift, and go to state 24
    SEMICOLON           shift, and go to state 146
    MINUS               shift, and go to state 26
    TRUEVAL             shift, and go to state 27
    FALSEVAL            shift, and go to state 28
    NOT                 shift, and go to state 30
    NUM                 shift, and go to state 31
    FLOAT               shift, and go to state 32
    ID                  shift, and go to state 33

    expr      go to state 147
    cast      go to state 36
    funcall   go to state 37
    arrexpr   go to state 38
    var       go to state 39
    constant  go to state 40
    floatval  go to state 41
    intval    go to state 42
    boolval   go to state 43


State 114

   45 fundef: EXPORT . fundef

    EXPORT  shift, and go to state 114
    VOID    shift, and go to state 3
    INT     shift, and go to state 4
    FLT     shift, and go to state 5
    BOOL    shift, and go to state 6

    fundef  go to state 16
    type    go to state 148


State 115

   35 exprstmt: ID . BRACKET_L expr BRACKET_R SEMICOLON
   68 varlet: ID . exprs
   69       | ID .

    BRACKET_L           shift, and go to state 149
    STRAIGHT_BRACKET_L  shift, and go to state 24
    MINUS               shift, and go to state 26
    TRUEVAL             shift, and go to state 27
    FALSEVAL            shift, and go to state 28
    NOT                 shift, and go to state 30
    NUM                 shift, and go to state 31
    FLOAT               shift, and go to state 32
    ID                  shift, and go to state 33

    $default  reduce using rule 69 (varlet)

    exprs     go to state 150
    expr      go to state 35
    cast      go to state 36
    funcall   go to state 37
    arrexpr   go to state 38
    var       go to state 39
    constant  go to state 40
    floatval  go to state 41
    intval    go to state 42
    boolval   go to state 43


State 116

   40 funbody: stmts .

    $default  reduce using rule 40 (funbody)


State 117

   14 stmts: stmt . stmts
   15      | stmt .

    IF      shift, and go to state 109
    WHILE   shift, and go to state 110
    DO      shift, and go to state 111
    FOR     shift, and go to state 112
    RETURN  shift, and go to state 113
    ID      shift, and go to state 115

    $default  reduce using rule 15 (stmts)

    stmts     go to state 151
    stmt      go to state 117
    assign    go to state 118
    while     go to state 119
    dowhile   go to state 120
    if        go to state 121
    for       go to state 122
    return    go to state 123
    exprstmt  go to state 124
    varlet    go to state 129


State 118

   16 stmt: assign .

    $default  reduce using rule 16 (stmt)


State 119

   17 stmt: while .

    $default  reduce using rule 17 (stmt)


State 120

   18 stmt: dowhile .

    $default  reduce using rule 18 (stmt)


State 121

   20 stmt: if .

    $default  reduce using rule 20 (stmt)


State 122

   19 stmt: for .

    $default  reduce using rule 19 (stmt)


State 123

   21 stmt: return .

    $default  reduce using rule 21 (stmt)


State 124

   22 stmt: exprstmt .

    $default  reduce using rule 22 (stmt)


State 125

   47 fundef: VOID ID BRACKET_L BRACKET_R CURLY_BRACKET_L funbody . CURLY_BRACKET_R

    CURLY_BRACKET_R  shift, and go to state 152


State 126

   39 funbody: fundefs . stmts
   41        | fundefs .

    IF      shift, and go to state 109
    WHILE   shift, and go to state 110
    DO      shift, and go to state 111
    FOR     shift, and go to state 112
    RETURN  shift, and go to state 113
    ID      shift, and go to state 115

    $default  reduce using rule 41 (funbody)

    stmts     go to state 153
    stmt      go to state 117
    assign    go to state 118
    while     go to state 119
    dowhile   go to state 120
    if        go to state 121
    for       go to state 122
    return    go to state 123
    exprstmt  go to state 124
    varlet    go to state 129


State 127

   43 fundefs: fundef .
   44        | fundef . fundefs

    EXPORT  shift, and go to state 114
    VOID    shift, and go to state 3
    INT     shift, and go to state 4
    FLT     shift, and go to state 5
    BOOL    shift, and go to state 6

    $default  reduce using rule 43 (fundefs)

    fundefs  go to state 154
    fundef   go to state 127
    type     go to state 148


State 128

   36 funbody: vardec .
   37        | vardec . fundefs
   38        | vardec . stmts
   42        | vardec . fundefs stmts
   60 vardec: vardec . type ID SEMICOLON
   61       | vardec . type ID LET expr SEMICOLON
   62       | vardec . type STRAIGHT_BRACKET_L exprs STRAIGHT_BRACKET_R ID SEMICOLON
   63       | vardec . type STRAIGHT_BRACKET_L exprs STRAIGHT_BRACKET_R ID LET expr SEMICOLON

    IF      shift, and go to state 109
    WHILE   shift, and go to state 110
    DO      shift, and go to state 111
    FOR     shift, and go to state 112
    RETURN  shift, and go to state 113
    EXPORT  shift, and go to state 114
    VOID    shift, and go to state 3
    INT     shift, and go to state 4
    FLT     shift, and go to state 5
    BOOL    shift, and go to state 6
    ID      shift, and go to state 115

    $default  reduce using rule 36 (funbody)

    stmts     go to state 155
    stmt      go to state 117
    assign    go to state 118
    while     go to state 119
    dowhile   go to state 120
    if        go to state 121
    for       go to state 122
    return    go to state 123
    exprstmt  go to state 124
    fundefs   go to state 156
    fundef    go to state 127
    varlet    go to state 129
    type      go to state 157


State 129

   23 assign: varlet . LET expr SEMICOLON

    LET  shift, and go to state 158


State 130

   46 fundef: type . ID BRACKET_L BRACKET_R CURLY_BRACKET_L funbody CURLY_BRACKET_R
   48       | type . ID BRACKET_L param BRACKET_R CURLY_BRACKET_L funbody CURLY_BRACKET_R
   50       | type . ID BRACKET_L BRACKET_R CURLY_BRACKET_L CURLY_BRACKET_R
   52       | type . ID BRACKET_L param BRACKET_R CURLY_BRACKET_L CURLY_BRACKET_R
   64 vardec: type . ID SEMICOLON
   65       | type . ID LET expr SEMICOLON
   66       | type . STRAIGHT_BRACKET_L exprs STRAIGHT_BRACKET_R ID SEMICOLON
   67       | type . STRAIGHT_BRACKET_L exprs STRAIGHT_BRACKET_R ID LET expr SEMICOLON

    STRAIGHT_BRACKET_L  shift, and go to state 159
    ID                  shift, and go to state 160


State 131

   49 fundef: VOID ID BRACKET_L param BRACKET_R CURLY_BRACKET_L . funbody CURLY_BRACKET_R
   53       | VOID ID BRACKET_L param BRACKET_R CURLY_BRACKET_L . CURLY_BRACKET_R

    CURLY_BRACKET_R  shift, and go to state 161
    IF               shift, and go to state 109
    WHILE            shift, and go to state 110
    DO               shift, and go to state 111
    FOR              shift, and go to state 112
    RETURN           shift, and go to state 113
    EXPORT           shift, and go to state 114
    VOID             shift, and go to state 3
    INT              shift, and go to state 4
    FLT              shift, and go to state 5
    BOOL             shift, and go to state 6
    ID               shift, and go to state 115

    stmts     go to state 116
    stmt      go to state 117
    assign    go to state 118
    while     go to state 119
    dowhile   go to state 120
    if        go to state 121
    for       go to state 122
    return    go to state 123
    exprstmt  go to state 124
    funbody   go to state 162
    fundefs   go to state 126
    fundef    go to state 127
    vardec    go to state 128
    varlet    go to state 129
    type      go to state 130


State 132

   56 param: type STRAIGHT_BRACKET_L ids . STRAIGHT_BRACKET_R ID
   57      | type STRAIGHT_BRACKET_L ids . STRAIGHT_BRACKET_R ID param

    STRAIGHT_BRACKET_R  shift, and go to state 163


State 133

   54 param: type ID COMMA . param

    INT   shift, and go to state 4
    FLT   shift, and go to state 5
    BOOL  shift, and go to state 6

    param  go to state 164
    type   go to state 48


State 134

   50 fundef: type ID BRACKET_L BRACKET_R CURLY_BRACKET_L CURLY_BRACKET_R .

    $default  reduce using rule 50 (fundef)


State 135

   46 fundef: type ID BRACKET_L BRACKET_R CURLY_BRACKET_L funbody . CURLY_BRACKET_R

    CURLY_BRACKET_R  shift, and go to state 165


State 136

   48 fundef: type ID BRACKET_L param BRACKET_R CURLY_BRACKET_L . funbody CURLY_BRACKET_R
   52       | type ID BRACKET_L param BRACKET_R CURLY_BRACKET_L . CURLY_BRACKET_R

    CURLY_BRACKET_R  shift, and go to state 166
    IF               shift, and go to state 109
    WHILE            shift, and go to state 110
    DO               shift, and go to state 111
    FOR              shift, and go to state 112
    RETURN           shift, and go to state 113
    EXPORT           shift, and go to state 114
    VOID             shift, and go to state 3
    INT              shift, and go to state 4
    FLT              shift, and go to state 5
    BOOL             shift, and go to state 6
    ID               shift, and go to state 115

    stmts     go to state 116
    stmt      go to state 117
    assign    go to state 118
    while     go to state 119
    dowhile   go to state 120
    if        go to state 121
    for       go to state 122
    return    go to state 123
    exprstmt  go to state 124
    funbody   go to state 167
    fundefs   go to state 126
    fundef    go to state 127
    vardec    go to state 128
    varlet    go to state 129
    type      go to state 130


State 137

   79 expr: expr . PLUS expr
   80     | expr . MINUS expr
   81     | expr . STAR expr
   82     | expr . SLASH expr
   83     | expr . PERCENT expr
   84     | expr . LE expr
   85     | expr . LT expr
   86     | expr . GE expr
   87     | expr . GT expr
   88     | expr . EQ expr
   89     | expr . NE expr
   90     | expr . OR expr
   91     | expr . AND expr
   94 cast: BRACKET_L type BRACKET_R expr .

    $default  reduce using rule 94 (cast)


State 138

   95 funcall: ID BRACKET_L exprs BRACKET_R .

    $default  reduce using rule 95 (funcall)


State 139

   13 globaldef: type ID exprs LET expr SEMICOLON .

    $default  reduce using rule 13 (globaldef)


State 140

   59 ids: ID COMMA ids .

    $default  reduce using rule 59 (ids)


State 141

    8 globaldec: EXTERN type ID STRAIGHT_BRACKET_L ids STRAIGHT_BRACKET_R SEMICOLON .

    $default  reduce using rule 8 (globaldec)


State 142

   26 if: IF BRACKET_L . expr BRACKET_R stmt
   27   | IF BRACKET_L . expr BRACKET_R stmt ELSE stmt
   28   | IF BRACKET_L . expr BRACKET_R CURLY_BRACKET_L stmts CURLY_BRACKET_R ELSE CURLY_BRACKET_L stmts CURLY_BRACKET_R
   29   | IF BRACKET_L . expr BRACKET_R stmt ELSE CURLY_BRACKET_L stmts CURLY_BRACKET_R
   30   | IF BRACKET_L . expr BRACKET_R CURLY_BRACKET_L stmts CURLY_BRACKET_R ELSE stmt

    BRACKET_L           shift, and go to state 49
    STRAIGHT_BRACKET_L  shift, and go to state 24
    MINUS               shift, and go to state 26
    TRUEVAL             shift, and go to state 27
    FALSEVAL            shift, and go to state 28
    NOT                 shift, and go to state 30
    NUM                 shift, and go to state 31
    FLOAT               shift, and go to state 32
    ID                  shift, and go to state 33

    expr      go to state 168
    cast      go to state 36
    funcall   go to state 37
    arrexpr   go to state 38
    var       go to state 39
    constant  go to state 40
    floatval  go to state 41
    intval    go to state 42
    boolval   go to state 43


State 143

   24 while: WHILE BRACKET_L . expr BRACKET_R CURLY_BRACKET_L stmts CURLY_BRACKET_R

    BRACKET_L           shift, and go to state 49
    STRAIGHT_BRACKET_L  shift, and go to state 24
    MINUS               shift, and go to state 26
    TRUEVAL             shift, and go to state 27
    FALSEVAL            shift, and go to state 28
    NOT                 shift, and go to state 30
    NUM                 shift, and go to state 31
    FLOAT               shift, and go to state 32
    ID                  shift, and go to state 33

    expr      go to state 169
    cast      go to state 36
    funcall   go to state 37
    arrexpr   go to state 38
    var       go to state 39
    constant  go to state 40
    floatval  go to state 41
    intval    go to state 42
    boolval   go to state 43


State 144

   25 dowhile: DO CURLY_BRACKET_L . stmts CURLY_BRACKET_R WHILE BRACKET_L expr BRACKET_R SEMICOLON

    IF      shift, and go to state 109
    WHILE   shift, and go to state 110
    DO      shift, and go to state 111
    FOR     shift, and go to state 112
    RETURN  shift, and go to state 113
    ID      shift, and go to state 115

    stmts     go to state 170
    stmt      go to state 117
    assign    go to state 118
    while     go to state 119
    dowhile   go to state 120
    if        go to state 121
    for       go to state 122
    return    go to state 123
    exprstmt  go to state 124
    varlet    go to state 129


State 145

   31 for: FOR BRACKET_L . INT ID LET expr COMMA expr COMMA expr BRACKET_R CURLY_BRACKET_L exprs CURLY_BRACKET_R
   32    | FOR BRACKET_L . INT ID LET expr COMMA expr BRACKET_R CURLY_BRACKET_R exprs CURLY_BRACKET_R

    INT  shift, and go to state 171


State 146

   34 return: RETURN SEMICOLON .

    $default  reduce using rule 34 (return)


State 147

   33 return: RETURN expr . SEMICOLON
   79 expr: expr . PLUS expr
   80     | expr . MINUS expr
   81     | expr . STAR expr
   82     | expr . SLASH expr
   83     | expr . PERCENT expr
   84     | expr . LE expr
   85     | expr . LT expr
   86     | expr . GE expr
   87     | expr . GT expr
   88     | expr . EQ expr
   89     | expr . NE expr
   90     | expr . OR expr
   91     | expr . AND expr

    SEMICOLON  shift, and go to state 172
    MINUS      shift, and go to state 63
    PLUS       shift, and go to state 64
    STAR       shift, and go to state 65
    SLASH      shift, and go to state 66
    PERCENT    shift, and go to state 67
    LE         shift, and go to state 68
    LT         shift, and go to state 69
    GE         shift, and go to state 70
    GT         shift, and go to state 71
    EQ         shift, and go to state 72
    NE         shift, and go to state 73
    OR         shift, and go to state 74
    AND        shift, and go to state 75


State 148

   46 fundef: type . ID BRACKET_L BRACKET_R CURLY_BRACKET_L funbody CURLY_BRACKET_R
   48       | type . ID BRACKET_L param BRACKET_R CURLY_BRACKET_L funbody CURLY_BRACKET_R
   50       | type . ID BRACKET_L BRACKET_R CURLY_BRACKET_L CURLY_BRACKET_R
   52       | type . ID BRACKET_L param BRACKET_R CURLY_BRACKET_L CURLY_BRACKET_R

    ID  shift, and go to state 173


State 149

   35 exprstmt: ID BRACKET_L . expr BRACKET_R SEMICOLON
   73 expr: BRACKET_L . expr BRACKET_R
   94 cast: BRACKET_L . type BRACKET_R expr

    BRACKET_L           shift, and go to state 49
    STRAIGHT_BRACKET_L  shift, and go to state 24
    MINUS               shift, and go to state 26
    TRUEVAL             shift, and go to state 27
    FALSEVAL            shift, and go to state 28
    NOT                 shift, and go to state 30
    INT                 shift, and go to state 4
    FLT                 shift, and go to state 5
    BOOL                shift, and go to state 6
    NUM                 shift, and go to state 31
    FLOAT               shift, and go to state 32
    ID                  shift, and go to state 33

    expr      go to state 174
    cast      go to state 36
    funcall   go to state 37
    arrexpr   go to state 38
    var       go to state 39
    constant  go to state 40
    floatval  go to state 41
    intval    go to state 42
    boolval   go to state 43
    type      go to state 82


State 150

   68 varlet: ID exprs .

    $default  reduce using rule 68 (varlet)


State 151

   14 stmts: stmt stmts .

    $default  reduce using rule 14 (stmts)


State 152

   47 fundef: VOID ID BRACKET_L BRACKET_R CURLY_BRACKET_L funbody CURLY_BRACKET_R .

    $default  reduce using rule 47 (fundef)


State 153

   39 funbody: fundefs stmts .

    $default  reduce using rule 39 (funbody)


State 154

   44 fundefs: fundef fundefs .

    $default  reduce using rule 44 (fundefs)


State 155

   38 funbody: vardec stmts .

    $default  reduce using rule 38 (funbody)


State 156

   37 funbody: vardec fundefs .
   42        | vardec fundefs . stmts

    IF      shift, and go to state 109
    WHILE   shift, and go to state 110
    DO      shift, and go to state 111
    FOR     shift, and go to state 112
    RETURN  shift, and go to state 113
    ID      shift, and go to state 115

    $default  reduce using rule 37 (funbody)

    stmts     go to state 175
    stmt      go to state 117
    assign    go to state 118
    while     go to state 119
    dowhile   go to state 120
    if        go to state 121
    for       go to state 122
    return    go to state 123
    exprstmt  go to state 124
    varlet    go to state 129


State 157

   46 fundef: type . ID BRACKET_L BRACKET_R CURLY_BRACKET_L funbody CURLY_BRACKET_R
   48       | type . ID BRACKET_L param BRACKET_R CURLY_BRACKET_L funbody CURLY_BRACKET_R
   50       | type . ID BRACKET_L BRACKET_R CURLY_BRACKET_L CURLY_BRACKET_R
   52       | type . ID BRACKET_L param BRACKET_R CURLY_BRACKET_L CURLY_BRACKET_R
   60 vardec: vardec type . ID SEMICOLON
   61       | vardec type . ID LET expr SEMICOLON
   62       | vardec type . STRAIGHT_BRACKET_L exprs STRAIGHT_BRACKET_R ID SEMICOLON
   63       | vardec type . STRAIGHT_BRACKET_L exprs STRAIGHT_BRACKET_R ID LET expr SEMICOLON

    STRAIGHT_BRACKET_L  shift, and go to state 176
    ID                  shift, and go to state 177


State 158

   23 assign: varlet LET . expr SEMICOLON

    BRACKET_L           shift, and go to state 49
    STRAIGHT_BRACKET_L  shift, and go to state 24
    MINUS               shift, and go to state 26
    TRUEVAL             shift, and go to state 27
    FALSEVAL            shift, and go to state 28
    NOT                 shift, and go to state 30
    NUM                 shift, and go to state 31
    FLOAT               shift, and go to state 32
    ID                  shift, and go to state 33

    expr      go to state 178
    cast      go to state 36
    funcall   go to state 37
    arrexpr   go to state 38
    var       go to state 39
    constant  go to state 40
    floatval  go to state 41
    intval    go to state 42
    boolval   go to state 43


State 159

   66 vardec: type STRAIGHT_BRACKET_L . exprs STRAIGHT_BRACKET_R ID SEMICOLON
   67       | type STRAIGHT_BRACKET_L . exprs STRAIGHT_BRACKET_R ID LET expr SEMICOLON

    BRACKET_L           shift, and go to state 49
    STRAIGHT_BRACKET_L  shift, and go to state 24
    MINUS               shift, and go to state 26
    TRUEVAL             shift, and go to state 27
    FALSEVAL            shift, and go to state 28
    NOT                 shift, and go to state 30
    NUM                 shift, and go to state 31
    FLOAT               shift, and go to state 32
    ID                  shift, and go to state 33

    exprs     go to state 179
    expr      go to state 35
    cast      go to state 36
    funcall   go to state 37
    arrexpr   go to state 38
    var       go to state 39
    constant  go to state 40
    floatval  go to state 41
    intval    go to state 42
    boolval   go to state 43


State 160

   46 fundef: type ID . BRACKET_L BRACKET_R CURLY_BRACKET_L funbody CURLY_BRACKET_R
   48       | type ID . BRACKET_L param BRACKET_R CURLY_BRACKET_L funbody CURLY_BRACKET_R
   50       | type ID . BRACKET_L BRACKET_R CURLY_BRACKET_L CURLY_BRACKET_R
   52       | type ID . BRACKET_L param BRACKET_R CURLY_BRACKET_L CURLY_BRACKET_R
   64 vardec: type ID . SEMICOLON
   65       | type ID . LET expr SEMICOLON

    BRACKET_L  shift, and go to state 180
    SEMICOLON  shift, and go to state 181
    LET        shift, and go to state 182


State 161

   53 fundef: VOID ID BRACKET_L param BRACKET_R CURLY_BRACKET_L CURLY_BRACKET_R .

    $default  reduce using rule 53 (fundef)


State 162

   49 fundef: VOID ID BRACKET_L param BRACKET_R CURLY_BRACKET_L funbody . CURLY_BRACKET_R

    CURLY_BRACKET_R  shift, and go to state 183


State 163

   56 param: type STRAIGHT_BRACKET_L ids STRAIGHT_BRACKET_R . ID
   57      | type STRAIGHT_BRACKET_L ids STRAIGHT_BRACKET_R . ID param

    ID  shift, and go to state 184


State 164

   54 param: type ID COMMA param .

    $default  reduce using rule 54 (param)


State 165

   46 fundef: type ID BRACKET_L BRACKET_R CURLY_BRACKET_L funbody CURLY_BRACKET_R .

    $default  reduce using rule 46 (fundef)


State 166

   52 fundef: type ID BRACKET_L param BRACKET_R CURLY_BRACKET_L CURLY_BRACKET_R .

    $default  reduce using rule 52 (fundef)


State 167

   48 fundef: type ID BRACKET_L param BRACKET_R CURLY_BRACKET_L funbody . CURLY_BRACKET_R

    CURLY_BRACKET_R  shift, and go to state 185


State 168

   26 if: IF BRACKET_L expr . BRACKET_R stmt
   27   | IF BRACKET_L expr . BRACKET_R stmt ELSE stmt
   28   | IF BRACKET_L expr . BRACKET_R CURLY_BRACKET_L stmts CURLY_BRACKET_R ELSE CURLY_BRACKET_L stmts CURLY_BRACKET_R
   29   | IF BRACKET_L expr . BRACKET_R stmt ELSE CURLY_BRACKET_L stmts CURLY_BRACKET_R
   30   | IF BRACKET_L expr . BRACKET_R CURLY_BRACKET_L stmts CURLY_BRACKET_R ELSE stmt
   79 expr: expr . PLUS expr
   80     | expr . MINUS expr
   81     | expr . STAR expr
   82     | expr . SLASH expr
   83     | expr . PERCENT expr
   84     | expr . LE expr
   85     | expr . LT expr
   86     | expr . GE expr
   87     | expr . GT expr
   88     | expr . EQ expr
   89     | expr . NE expr
   90     | expr . OR expr
   91     | expr . AND expr

    BRACKET_R  shift, and go to state 186
    MINUS      shift, and go to state 63
    PLUS       shift, and go to state 64
    STAR       shift, and go to state 65
    SLASH      shift, and go to state 66
    PERCENT    shift, and go to state 67
    LE         shift, and go to state 68
    LT         shift, and go to state 69
    GE         shift, and go to state 70
    GT         shift, and go to state 71
    EQ         shift, and go to state 72
    NE         shift, and go to state 73
    OR         shift, and go to state 74
    AND        shift, and go to state 75


State 169

   24 while: WHILE BRACKET_L expr . BRACKET_R CURLY_BRACKET_L stmts CURLY_BRACKET_R
   79 expr: expr . PLUS expr
   80     | expr . MINUS expr
   81     | expr . STAR expr
   82     | expr . SLASH expr
   83     | expr . PERCENT expr
   84     | expr . LE expr
   85     | expr . LT expr
   86     | expr . GE expr
   87     | expr . GT expr
   88     | expr . EQ expr
   89     | expr . NE expr
   90     | expr . OR expr
   91     | expr . AND expr

    BRACKET_R  shift, and go to state 187
    MINUS      shift, and go to state 63
    PLUS       shift, and go to state 64
    STAR       shift, and go to state 65
    SLASH      shift, and go to state 66
    PERCENT    shift, and go to state 67
    LE         shift, and go to state 68
    LT         shift, and go to state 69
    GE         shift, and go to state 70
    GT         shift, and go to state 71
    EQ         shift, and go to state 72
    NE         shift, and go to state 73
    OR         shift, and go to state 74
    AND        shift, and go to state 75


State 170

   25 dowhile: DO CURLY_BRACKET_L stmts . CURLY_BRACKET_R WHILE BRACKET_L expr BRACKET_R SEMICOLON

    CURLY_BRACKET_R  shift, and go to state 188


State 171

   31 for: FOR BRACKET_L INT . ID LET expr COMMA expr COMMA expr BRACKET_R CURLY_BRACKET_L exprs CURLY_BRACKET_R
   32    | FOR BRACKET_L INT . ID LET expr COMMA expr BRACKET_R CURLY_BRACKET_R exprs CURLY_BRACKET_R

    ID  shift, and go to state 189


State 172

   33 return: RETURN expr SEMICOLON .

    $default  reduce using rule 33 (return)


State 173

   46 fundef: type ID . BRACKET_L BRACKET_R CURLY_BRACKET_L funbody CURLY_BRACKET_R
   48       | type ID . BRACKET_L param BRACKET_R CURLY_BRACKET_L funbody CURLY_BRACKET_R
   50       | type ID . BRACKET_L BRACKET_R CURLY_BRACKET_L CURLY_BRACKET_R
   52       | type ID . BRACKET_L param BRACKET_R CURLY_BRACKET_L CURLY_BRACKET_R

    BRACKET_L  shift, and go to state 180


State 174

   35 exprstmt: ID BRACKET_L expr . BRACKET_R SEMICOLON
   73 expr: BRACKET_L expr . BRACKET_R
   79     | expr . PLUS expr
   80     | expr . MINUS expr
   81     | expr . STAR expr
   82     | expr . SLASH expr
   83     | expr . PERCENT expr
   84     | expr . LE expr
   85     | expr . LT expr
   86     | expr . GE expr
   87     | expr . GT expr
   88     | expr . EQ expr
   89     | expr . NE expr
   90     | expr . OR expr
   91     | expr . AND expr

    BRACKET_R  shift, and go to state 190
    MINUS      shift, and go to state 63
    PLUS       shift, and go to state 64
    STAR       shift, and go to state 65
    SLASH      shift, and go to state 66
    PERCENT    shift, and go to state 67
    LE         shift, and go to state 68
    LT         shift, and go to state 69
    GE         shift, and go to state 70
    GT         shift, and go to state 71
    EQ         shift, and go to state 72
    NE         shift, and go to state 73
    OR         shift, and go to state 74
    AND        shift, and go to state 75


State 175

   42 funbody: vardec fundefs stmts .

    $default  reduce using rule 42 (funbody)


State 176

   62 vardec: vardec type STRAIGHT_BRACKET_L . exprs STRAIGHT_BRACKET_R ID SEMICOLON
   63       | vardec type STRAIGHT_BRACKET_L . exprs STRAIGHT_BRACKET_R ID LET expr SEMICOLON

    BRACKET_L           shift, and go to state 49
    STRAIGHT_BRACKET_L  shift, and go to state 24
    MINUS               shift, and go to state 26
    TRUEVAL             shift, and go to state 27
    FALSEVAL            shift, and go to state 28
    NOT                 shift, and go to state 30
    NUM                 shift, and go to state 31
    FLOAT               shift, and go to state 32
    ID                  shift, and go to state 33

    exprs     go to state 191
    expr      go to state 35
    cast      go to state 36
    funcall   go to state 37
    arrexpr   go to state 38
    var       go to state 39
    constant  go to state 40
    floatval  go to state 41
    intval    go to state 42
    boolval   go to state 43


State 177

   46 fundef: type ID . BRACKET_L BRACKET_R CURLY_BRACKET_L funbody CURLY_BRACKET_R
   48       | type ID . BRACKET_L param BRACKET_R CURLY_BRACKET_L funbody CURLY_BRACKET_R
   50       | type ID . BRACKET_L BRACKET_R CURLY_BRACKET_L CURLY_BRACKET_R
   52       | type ID . BRACKET_L param BRACKET_R CURLY_BRACKET_L CURLY_BRACKET_R
   60 vardec: vardec type ID . SEMICOLON
   61       | vardec type ID . LET expr SEMICOLON

    BRACKET_L  shift, and go to state 180
    SEMICOLON  shift, and go to state 192
    LET        shift, and go to state 193


State 178

   23 assign: varlet LET expr . SEMICOLON
   79 expr: expr . PLUS expr
   80     | expr . MINUS expr
   81     | expr . STAR expr
   82     | expr . SLASH expr
   83     | expr . PERCENT expr
   84     | expr . LE expr
   85     | expr . LT expr
   86     | expr . GE expr
   87     | expr . GT expr
   88     | expr . EQ expr
   89     | expr . NE expr
   90     | expr . OR expr
   91     | expr . AND expr

    SEMICOLON  shift, and go to state 194
    MINUS      shift, and go to state 63
    PLUS       shift, and go to state 64
    STAR       shift, and go to state 65
    SLASH      shift, and go to state 66
    PERCENT    shift, and go to state 67
    LE         shift, and go to state 68
    LT         shift, and go to state 69
    GE         shift, and go to state 70
    GT         shift, and go to state 71
    EQ         shift, and go to state 72
    NE         shift, and go to state 73
    OR         shift, and go to state 74
    AND        shift, and go to state 75


State 179

   66 vardec: type STRAIGHT_BRACKET_L exprs . STRAIGHT_BRACKET_R ID SEMICOLON
   67       | type STRAIGHT_BRACKET_L exprs . STRAIGHT_BRACKET_R ID LET expr SEMICOLON

    STRAIGHT_BRACKET_R  shift, and go to state 195


State 180

   46 fundef: type ID BRACKET_L . BRACKET_R CURLY_BRACKET_L funbody CURLY_BRACKET_R
   48       | type ID BRACKET_L . param BRACKET_R CURLY_BRACKET_L funbody CURLY_BRACKET_R
   50       | type ID BRACKET_L . BRACKET_R CURLY_BRACKET_L CURLY_BRACKET_R
   52       | type ID BRACKET_L . param BRACKET_R CURLY_BRACKET_L CURLY_BRACKET_R

    BRACKET_R  shift, and go to state 50
    INT        shift, and go to state 4
    FLT        shift, and go to state 5
    BOOL       shift, and go to state 6

    param  go to state 51
    type   go to state 48


State 181

   64 vardec: type ID SEMICOLON .

    $default  reduce using rule 64 (vardec)


State 182

   65 vardec: type ID LET . expr SEMICOLON

    BRACKET_L           shift, and go to state 49
    STRAIGHT_BRACKET_L  shift, and go to state 24
    MINUS               shift, and go to state 26
    TRUEVAL             shift, and go to state 27
    FALSEVAL            shift, and go to state 28
    NOT                 shift, and go to state 30
    NUM                 shift, and go to state 31
    FLOAT               shift, and go to state 32
    ID                  shift, and go to state 33

    expr      go to state 196
    cast      go to state 36
    funcall   go to state 37
    arrexpr   go to state 38
    var       go to state 39
    constant  go to state 40
    floatval  go to state 41
    intval    go to state 42
    boolval   go to state 43


State 183

   49 fundef: VOID ID BRACKET_L param BRACKET_R CURLY_BRACKET_L funbody CURLY_BRACKET_R .

    $default  reduce using rule 49 (fundef)


State 184

   56 param: type STRAIGHT_BRACKET_L ids STRAIGHT_BRACKET_R ID .
   57      | type STRAIGHT_BRACKET_L ids STRAIGHT_BRACKET_R ID . param

    INT   shift, and go to state 4
    FLT   shift, and go to state 5
    BOOL  shift, and go to state 6

    $default  reduce using rule 56 (param)

    param  go to state 197
    type   go to state 48


State 185

   48 fundef: type ID BRACKET_L param BRACKET_R CURLY_BRACKET_L funbody CURLY_BRACKET_R .

    $default  reduce using rule 48 (fundef)


State 186

   26 if: IF BRACKET_L expr BRACKET_R . stmt
   27   | IF BRACKET_L expr BRACKET_R . stmt ELSE stmt
   28   | IF BRACKET_L expr BRACKET_R . CURLY_BRACKET_L stmts CURLY_BRACKET_R ELSE CURLY_BRACKET_L stmts CURLY_BRACKET_R
   29   | IF BRACKET_L expr BRACKET_R . stmt ELSE CURLY_BRACKET_L stmts CURLY_BRACKET_R
   30   | IF BRACKET_L expr BRACKET_R . CURLY_BRACKET_L stmts CURLY_BRACKET_R ELSE stmt

    CURLY_BRACKET_L  shift, and go to state 198
    IF               shift, and go to state 109
    WHILE            shift, and go to state 110
    DO               shift, and go to state 111
    FOR              shift, and go to state 112
    RETURN           shift, and go to state 113
    ID               shift, and go to state 115

    stmt      go to state 199
    assign    go to state 118
    while     go to state 119
    dowhile   go to state 120
    if        go to state 121
    for       go to state 122
    return    go to state 123
    exprstmt  go to state 124
    varlet    go to state 129


State 187

   24 while: WHILE BRACKET_L expr BRACKET_R . CURLY_BRACKET_L stmts CURLY_BRACKET_R

    CURLY_BRACKET_L  shift, and go to state 200


State 188

   25 dowhile: DO CURLY_BRACKET_L stmts CURLY_BRACKET_R . WHILE BRACKET_L expr BRACKET_R SEMICOLON

    WHILE  shift, and go to state 201


State 189

   31 for: FOR BRACKET_L INT ID . LET expr COMMA expr COMMA expr BRACKET_R CURLY_BRACKET_L exprs CURLY_BRACKET_R
   32    | FOR BRACKET_L INT ID . LET expr COMMA expr BRACKET_R CURLY_BRACKET_R exprs CURLY_BRACKET_R

    LET  shift, and go to state 202


State 190

   35 exprstmt: ID BRACKET_L expr BRACKET_R . SEMICOLON
   73 expr: BRACKET_L expr BRACKET_R .

    SEMICOLON  shift, and go to state 203

    $default  reduce using rule 73 (expr)


State 191

   62 vardec: vardec type STRAIGHT_BRACKET_L exprs . STRAIGHT_BRACKET_R ID SEMICOLON
   63       | vardec type STRAIGHT_BRACKET_L exprs . STRAIGHT_BRACKET_R ID LET expr SEMICOLON

    STRAIGHT_BRACKET_R  shift, and go to state 204


State 192

   60 vardec: vardec type ID SEMICOLON .

    $default  reduce using rule 60 (vardec)


State 193

   61 vardec: vardec type ID LET . expr SEMICOLON

    BRACKET_L           shift, and go to state 49
    STRAIGHT_BRACKET_L  shift, and go to state 24
    MINUS               shift, and go to state 26
    TRUEVAL             shift, and go to state 27
    FALSEVAL            shift, and go to state 28
    NOT                 shift, and go to state 30
    NUM                 shift, and go to state 31
    FLOAT               shift, and go to state 32
    ID                  shift, and go to state 33

    expr      go to state 205
    cast      go to state 36
    funcall   go to state 37
    arrexpr   go to state 38
    var       go to state 39
    constant  go to state 40
    floatval  go to state 41
    intval    go to state 42
    boolval   go to state 43


State 194

   23 assign: varlet LET expr SEMICOLON .

    $default  reduce using rule 23 (assign)


State 195

   66 vardec: type STRAIGHT_BRACKET_L exprs STRAIGHT_BRACKET_R . ID SEMICOLON
   67       | type STRAIGHT_BRACKET_L exprs STRAIGHT_BRACKET_R . ID LET expr SEMICOLON

    ID  shift, and go to state 206


State 196

   65 vardec: type ID LET expr . SEMICOLON
   79 expr: expr . PLUS expr
   80     | expr . MINUS expr
   81     | expr . STAR expr
   82     | expr . SLASH expr
   83     | expr . PERCENT expr
   84     | expr . LE expr
   85     | expr . LT expr
   86     | expr . GE expr
   87     | expr . GT expr
   88     | expr . EQ expr
   89     | expr . NE expr
   90     | expr . OR expr
   91     | expr . AND expr

    SEMICOLON  shift, and go to state 207
    MINUS      shift, and go to state 63
    PLUS       shift, and go to state 64
    STAR       shift, and go to state 65
    SLASH      shift, and go to state 66
    PERCENT    shift, and go to state 67
    LE         shift, and go to state 68
    LT         shift, and go to state 69
    GE         shift, and go to state 70
    GT         shift, and go to state 71
    EQ         shift, and go to state 72
    NE         shift, and go to state 73
    OR         shift, and go to state 74
    AND        shift, and go to state 75


State 197

   57 param: type STRAIGHT_BRACKET_L ids STRAIGHT_BRACKET_R ID param .

    $default  reduce using rule 57 (param)


State 198

   28 if: IF BRACKET_L expr BRACKET_R CURLY_BRACKET_L . stmts CURLY_BRACKET_R ELSE CURLY_BRACKET_L stmts CURLY_BRACKET_R
   30   | IF BRACKET_L expr BRACKET_R CURLY_BRACKET_L . stmts CURLY_BRACKET_R ELSE stmt

    IF      shift, and go to state 109
    WHILE   shift, and go to state 110
    DO      shift, and go to state 111
    FOR     shift, and go to state 112
    RETURN  shift, and go to state 113
    ID      shift, and go to state 115

    stmts     go to state 208
    stmt      go to state 117
    assign    go to state 118
    while     go to state 119
    dowhile   go to state 120
    if        go to state 121
    for       go to state 122
    return    go to state 123
    exprstmt  go to state 124
    varlet    go to state 129


State 199

   26 if: IF BRACKET_L expr BRACKET_R stmt .
   27   | IF BRACKET_L expr BRACKET_R stmt . ELSE stmt
   29   | IF BRACKET_L expr BRACKET_R stmt . ELSE CURLY_BRACKET_L stmts CURLY_BRACKET_R

    ELSE  shift, and go to state 209

    $default  reduce using rule 26 (if)


State 200

   24 while: WHILE BRACKET_L expr BRACKET_R CURLY_BRACKET_L . stmts CURLY_BRACKET_R

    IF      shift, and go to state 109
    WHILE   shift, and go to state 110
    DO      shift, and go to state 111
    FOR     shift, and go to state 112
    RETURN  shift, and go to state 113
    ID      shift, and go to state 115

    stmts     go to state 210
    stmt      go to state 117
    assign    go to state 118
    while     go to state 119
    dowhile   go to state 120
    if        go to state 121
    for       go to state 122
    return    go to state 123
    exprstmt  go to state 124
    varlet    go to state 129


State 201

   25 dowhile: DO CURLY_BRACKET_L stmts CURLY_BRACKET_R WHILE . BRACKET_L expr BRACKET_R SEMICOLON

    BRACKET_L  shift, and go to state 211


State 202

   31 for: FOR BRACKET_L INT ID LET . expr COMMA expr COMMA expr BRACKET_R CURLY_BRACKET_L exprs CURLY_BRACKET_R
   32    | FOR BRACKET_L INT ID LET . expr COMMA expr BRACKET_R CURLY_BRACKET_R exprs CURLY_BRACKET_R

    BRACKET_L           shift, and go to state 49
    STRAIGHT_BRACKET_L  shift, and go to state 24
    MINUS               shift, and go to state 26
    TRUEVAL             shift, and go to state 27
    FALSEVAL            shift, and go to state 28
    NOT                 shift, and go to state 30
    NUM                 shift, and go to state 31
    FLOAT               shift, and go to state 32
    ID                  shift, and go to state 33

    expr      go to state 212
    cast      go to state 36
    funcall   go to state 37
    arrexpr   go to state 38
    var       go to state 39
    constant  go to state 40
    floatval  go to state 41
    intval    go to state 42
    boolval   go to state 43


State 203

   35 exprstmt: ID BRACKET_L expr BRACKET_R SEMICOLON .

    $default  reduce using rule 35 (exprstmt)


State 204

   62 vardec: vardec type STRAIGHT_BRACKET_L exprs STRAIGHT_BRACKET_R . ID SEMICOLON
   63       | vardec type STRAIGHT_BRACKET_L exprs STRAIGHT_BRACKET_R . ID LET expr SEMICOLON

    ID  shift, and go to state 213


State 205

   61 vardec: vardec type ID LET expr . SEMICOLON
   79 expr: expr . PLUS expr
   80     | expr . MINUS expr
   81     | expr . STAR expr
   82     | expr . SLASH expr
   83     | expr . PERCENT expr
   84     | expr . LE expr
   85     | expr . LT expr
   86     | expr . GE expr
   87     | expr . GT expr
   88     | expr . EQ expr
   89     | expr . NE expr
   90     | expr . OR expr
   91     | expr . AND expr

    SEMICOLON  shift, and go to state 214
    MINUS      shift, and go to state 63
    PLUS       shift, and go to state 64
    STAR       shift, and go to state 65
    SLASH      shift, and go to state 66
    PERCENT    shift, and go to state 67
    LE         shift, and go to state 68
    LT         shift, and go to state 69
    GE         shift, and go to state 70
    GT         shift, and go to state 71
    EQ         shift, and go to state 72
    NE         shift, and go to state 73
    OR         shift, and go to state 74
    AND        shift, and go to state 75


State 206

   66 vardec: type STRAIGHT_BRACKET_L exprs STRAIGHT_BRACKET_R ID . SEMICOLON
   67       | type STRAIGHT_BRACKET_L exprs STRAIGHT_BRACKET_R ID . LET expr SEMICOLON

    SEMICOLON  shift, and go to state 215
    LET        shift, and go to state 216


State 207

   65 vardec: type ID LET expr SEMICOLON .

    $default  reduce using rule 65 (vardec)


State 208

   28 if: IF BRACKET_L expr BRACKET_R CURLY_BRACKET_L stmts . CURLY_BRACKET_R ELSE CURLY_BRACKET_L stmts CURLY_BRACKET_R
   30   | IF BRACKET_L expr BRACKET_R CURLY_BRACKET_L stmts . CURLY_BRACKET_R ELSE stmt

    CURLY_BRACKET_R  shift, and go to state 217


State 209

   27 if: IF BRACKET_L expr BRACKET_R stmt ELSE . stmt
   29   | IF BRACKET_L expr BRACKET_R stmt ELSE . CURLY_BRACKET_L stmts CURLY_BRACKET_R

    CURLY_BRACKET_L  shift, and go to state 218
    IF               shift, and go to state 109
    WHILE            shift, and go to state 110
    DO               shift, and go to state 111
    FOR              shift, and go to state 112
    RETURN           shift, and go to state 113
    ID               shift, and go to state 115

    stmt      go to state 219
    assign    go to state 118
    while     go to state 119
    dowhile   go to state 120
    if        go to state 121
    for       go to state 122
    return    go to state 123
    exprstmt  go to state 124
    varlet    go to state 129


State 210

   24 while: WHILE BRACKET_L expr BRACKET_R CURLY_BRACKET_L stmts . CURLY_BRACKET_R

    CURLY_BRACKET_R  shift, and go to state 220


State 211

   25 dowhile: DO CURLY_BRACKET_L stmts CURLY_BRACKET_R WHILE BRACKET_L . expr BRACKET_R SEMICOLON

    BRACKET_L           shift, and go to state 49
    STRAIGHT_BRACKET_L  shift, and go to state 24
    MINUS               shift, and go to state 26
    TRUEVAL             shift, and go to state 27
    FALSEVAL            shift, and go to state 28
    NOT                 shift, and go to state 30
    NUM                 shift, and go to state 31
    FLOAT               shift, and go to state 32
    ID                  shift, and go to state 33

    expr      go to state 221
    cast      go to state 36
    funcall   go to state 37
    arrexpr   go to state 38
    var       go to state 39
    constant  go to state 40
    floatval  go to state 41
    intval    go to state 42
    boolval   go to state 43


State 212

   31 for: FOR BRACKET_L INT ID LET expr . COMMA expr COMMA expr BRACKET_R CURLY_BRACKET_L exprs CURLY_BRACKET_R
   32    | FOR BRACKET_L INT ID LET expr . COMMA expr BRACKET_R CURLY_BRACKET_R exprs CURLY_BRACKET_R
   79 expr: expr . PLUS expr
   80     | expr . MINUS expr
   81     | expr . STAR expr
   82     | expr . SLASH expr
   83     | expr . PERCENT expr
   84     | expr . LE expr
   85     | expr . LT expr
   86     | expr . GE expr
   87     | expr . GT expr
   88     | expr . EQ expr
   89     | expr . NE expr
   90     | expr . OR expr
   91     | expr . AND expr

    COMMA    shift, and go to state 222
    MINUS    shift, and go to state 63
    PLUS     shift, and go to state 64
    STAR     shift, and go to state 65
    SLASH    shift, and go to state 66
    PERCENT  shift, and go to state 67
    LE       shift, and go to state 68
    LT       shift, and go to state 69
    GE       shift, and go to state 70
    GT       shift, and go to state 71
    EQ       shift, and go to state 72
    NE       shift, and go to state 73
    OR       shift, and go to state 74
    AND      shift, and go to state 75


State 213

   62 vardec: vardec type STRAIGHT_BRACKET_L exprs STRAIGHT_BRACKET_R ID . SEMICOLON
   63       | vardec type STRAIGHT_BRACKET_L exprs STRAIGHT_BRACKET_R ID . LET expr SEMICOLON

    SEMICOLON  shift, and go to state 223
    LET        shift, and go to state 224


State 214

   61 vardec: vardec type ID LET expr SEMICOLON .

    $default  reduce using rule 61 (vardec)


State 215

   66 vardec: type STRAIGHT_BRACKET_L exprs STRAIGHT_BRACKET_R ID SEMICOLON .

    $default  reduce using rule 66 (vardec)


State 216

   67 vardec: type STRAIGHT_BRACKET_L exprs STRAIGHT_BRACKET_R ID LET . expr SEMICOLON

    BRACKET_L           shift, and go to state 49
    STRAIGHT_BRACKET_L  shift, and go to state 24
    MINUS               shift, and go to state 26
    TRUEVAL             shift, and go to state 27
    FALSEVAL            shift, and go to state 28
    NOT                 shift, and go to state 30
    NUM                 shift, and go to state 31
    FLOAT               shift, and go to state 32
    ID                  shift, and go to state 33

    expr      go to state 225
    cast      go to state 36
    funcall   go to state 37
    arrexpr   go to state 38
    var       go to state 39
    constant  go to state 40
    floatval  go to state 41
    intval    go to state 42
    boolval   go to state 43


State 217

   28 if: IF BRACKET_L expr BRACKET_R CURLY_BRACKET_L stmts CURLY_BRACKET_R . ELSE CURLY_BRACKET_L stmts CURLY_BRACKET_R
   30   | IF BRACKET_L expr BRACKET_R CURLY_BRACKET_L stmts CURLY_BRACKET_R . ELSE stmt

    ELSE  shift, and go to state 226


State 218

   29 if: IF BRACKET_L expr BRACKET_R stmt ELSE CURLY_BRACKET_L . stmts CURLY_BRACKET_R

    IF      shift, and go to state 109
    WHILE   shift, and go to state 110
    DO      shift, and go to state 111
    FOR     shift, and go to state 112
    RETURN  shift, and go to state 113
    ID      shift, and go to state 115

    stmts     go to state 227
    stmt      go to state 117
    assign    go to state 118
    while     go to state 119
    dowhile   go to state 120
    if        go to state 121
    for       go to state 122
    return    go to state 123
    exprstmt  go to state 124
    varlet    go to state 129


State 219

   27 if: IF BRACKET_L expr BRACKET_R stmt ELSE stmt .

    $default  reduce using rule 27 (if)


State 220

   24 while: WHILE BRACKET_L expr BRACKET_R CURLY_BRACKET_L stmts CURLY_BRACKET_R .

    $default  reduce using rule 24 (while)


State 221

   25 dowhile: DO CURLY_BRACKET_L stmts CURLY_BRACKET_R WHILE BRACKET_L expr . BRACKET_R SEMICOLON
   79 expr: expr . PLUS expr
   80     | expr . MINUS expr
   81     | expr . STAR expr
   82     | expr . SLASH expr
   83     | expr . PERCENT expr
   84     | expr . LE expr
   85     | expr . LT expr
   86     | expr . GE expr
   87     | expr . GT expr
   88     | expr . EQ expr
   89     | expr . NE expr
   90     | expr . OR expr
   91     | expr . AND expr

    BRACKET_R  shift, and go to state 228
    MINUS      shift, and go to state 63
    PLUS       shift, and go to state 64
    STAR       shift, and go to state 65
    SLASH      shift, and go to state 66
    PERCENT    shift, and go to state 67
    LE         shift, and go to state 68
    LT         shift, and go to state 69
    GE         shift, and go to state 70
    GT         shift, and go to state 71
    EQ         shift, and go to state 72
    NE         shift, and go to state 73
    OR         shift, and go to state 74
    AND        shift, and go to state 75


State 222

   31 for: FOR BRACKET_L INT ID LET expr COMMA . expr COMMA expr BRACKET_R CURLY_BRACKET_L exprs CURLY_BRACKET_R
   32    | FOR BRACKET_L INT ID LET expr COMMA . expr BRACKET_R CURLY_BRACKET_R exprs CURLY_BRACKET_R

    BRACKET_L           shift, and go to state 49
    STRAIGHT_BRACKET_L  shift, and go to state 24
    MINUS               shift, and go to state 26
    TRUEVAL             shift, and go to state 27
    FALSEVAL            shift, and go to state 28
    NOT                 shift, and go to state 30
    NUM                 shift, and go to state 31
    FLOAT               shift, and go to state 32
    ID                  shift, and go to state 33

    expr      go to state 229
    cast      go to state 36
    funcall   go to state 37
    arrexpr   go to state 38
    var       go to state 39
    constant  go to state 40
    floatval  go to state 41
    intval    go to state 42
    boolval   go to state 43


State 223

   62 vardec: vardec type STRAIGHT_BRACKET_L exprs STRAIGHT_BRACKET_R ID SEMICOLON .

    $default  reduce using rule 62 (vardec)


State 224

   63 vardec: vardec type STRAIGHT_BRACKET_L exprs STRAIGHT_BRACKET_R ID LET . expr SEMICOLON

    BRACKET_L           shift, and go to state 49
    STRAIGHT_BRACKET_L  shift, and go to state 24
    MINUS               shift, and go to state 26
    TRUEVAL             shift, and go to state 27
    FALSEVAL            shift, and go to state 28
    NOT                 shift, and go to state 30
    NUM                 shift, and go to state 31
    FLOAT               shift, and go to state 32
    ID                  shift, and go to state 33

    expr      go to state 230
    cast      go to state 36
    funcall   go to state 37
    arrexpr   go to state 38
    var       go to state 39
    constant  go to state 40
    floatval  go to state 41
    intval    go to state 42
    boolval   go to state 43


State 225

   67 vardec: type STRAIGHT_BRACKET_L exprs STRAIGHT_BRACKET_R ID LET expr . SEMICOLON
   79 expr: expr . PLUS expr
   80     | expr . MINUS expr
   81     | expr . STAR expr
   82     | expr . SLASH expr
   83     | expr . PERCENT expr
   84     | expr . LE expr
   85     | expr . LT expr
   86     | expr . GE expr
   87     | expr . GT expr
   88     | expr . EQ expr
   89     | expr . NE expr
   90     | expr . OR expr
   91     | expr . AND expr

    SEMICOLON  shift, and go to state 231
    MINUS      shift, and go to state 63
    PLUS       shift, and go to state 64
    STAR       shift, and go to state 65
    SLASH      shift, and go to state 66
    PERCENT    shift, and go to state 67
    LE         shift, and go to state 68
    LT         shift, and go to state 69
    GE         shift, and go to state 70
    GT         shift, and go to state 71
    EQ         shift, and go to state 72
    NE         shift, and go to state 73
    OR         shift, and go to state 74
    AND        shift, and go to state 75


State 226

   28 if: IF BRACKET_L expr BRACKET_R CURLY_BRACKET_L stmts CURLY_BRACKET_R ELSE . CURLY_BRACKET_L stmts CURLY_BRACKET_R
   30   | IF BRACKET_L expr BRACKET_R CURLY_BRACKET_L stmts CURLY_BRACKET_R ELSE . stmt

    CURLY_BRACKET_L  shift, and go to state 232
    IF               shift, and go to state 109
    WHILE            shift, and go to state 110
    DO               shift, and go to state 111
    FOR              shift, and go to state 112
    RETURN           shift, and go to state 113
    ID               shift, and go to state 115

    stmt      go to state 233
    assign    go to state 118
    while     go to state 119
    dowhile   go to state 120
    if        go to state 121
    for       go to state 122
    return    go to state 123
    exprstmt  go to state 124
    varlet    go to state 129


State 227

   29 if: IF BRACKET_L expr BRACKET_R stmt ELSE CURLY_BRACKET_L stmts . CURLY_BRACKET_R

    CURLY_BRACKET_R  shift, and go to state 234


State 228

   25 dowhile: DO CURLY_BRACKET_L stmts CURLY_BRACKET_R WHILE BRACKET_L expr BRACKET_R . SEMICOLON

    SEMICOLON  shift, and go to state 235


State 229

   31 for: FOR BRACKET_L INT ID LET expr COMMA expr . COMMA expr BRACKET_R CURLY_BRACKET_L exprs CURLY_BRACKET_R
   32    | FOR BRACKET_L INT ID LET expr COMMA expr . BRACKET_R CURLY_BRACKET_R exprs CURLY_BRACKET_R
   79 expr: expr . PLUS expr
   80     | expr . MINUS expr
   81     | expr . STAR expr
   82     | expr . SLASH expr
   83     | expr . PERCENT expr
   84     | expr . LE expr
   85     | expr . LT expr
   86     | expr . GE expr
   87     | expr . GT expr
   88     | expr . EQ expr
   89     | expr . NE expr
   90     | expr . OR expr
   91     | expr . AND expr

    BRACKET_R  shift, and go to state 236
    COMMA      shift, and go to state 237
    MINUS      shift, and go to state 63
    PLUS       shift, and go to state 64
    STAR       shift, and go to state 65
    SLASH      shift, and go to state 66
    PERCENT    shift, and go to state 67
    LE         shift, and go to state 68
    LT         shift, and go to state 69
    GE         shift, and go to state 70
    GT         shift, and go to state 71
    EQ         shift, and go to state 72
    NE         shift, and go to state 73
    OR         shift, and go to state 74
    AND        shift, and go to state 75


State 230

   63 vardec: vardec type STRAIGHT_BRACKET_L exprs STRAIGHT_BRACKET_R ID LET expr . SEMICOLON
   79 expr: expr . PLUS expr
   80     | expr . MINUS expr
   81     | expr . STAR expr
   82     | expr . SLASH expr
   83     | expr . PERCENT expr
   84     | expr . LE expr
   85     | expr . LT expr
   86     | expr . GE expr
   87     | expr . GT expr
   88     | expr . EQ expr
   89     | expr . NE expr
   90     | expr . OR expr
   91     | expr . AND expr

    SEMICOLON  shift, and go to state 238
    MINUS      shift, and go to state 63
    PLUS       shift, and go to state 64
    STAR       shift, and go to state 65
    SLASH      shift, and go to state 66
    PERCENT    shift, and go to state 67
    LE         shift, and go to state 68
    LT         shift, and go to state 69
    GE         shift, and go to state 70
    GT         shift, and go to state 71
    EQ         shift, and go to state 72
    NE         shift, and go to state 73
    OR         shift, and go to state 74
    AND        shift, and go to state 75


State 231

   67 vardec: type STRAIGHT_BRACKET_L exprs STRAIGHT_BRACKET_R ID LET expr SEMICOLON .

    $default  reduce using rule 67 (vardec)


State 232

   28 if: IF BRACKET_L expr BRACKET_R CURLY_BRACKET_L stmts CURLY_BRACKET_R ELSE CURLY_BRACKET_L . stmts CURLY_BRACKET_R

    IF      shift, and go to state 109
    WHILE   shift, and go to state 110
    DO      shift, and go to state 111
    FOR     shift, and go to state 112
    RETURN  shift, and go to state 113
    ID      shift, and go to state 115

    stmts     go to state 239
    stmt      go to state 117
    assign    go to state 118
    while     go to state 119
    dowhile   go to state 120
    if        go to state 121
    for       go to state 122
    return    go to state 123
    exprstmt  go to state 124
    varlet    go to state 129


State 233

   30 if: IF BRACKET_L expr BRACKET_R CURLY_BRACKET_L stmts CURLY_BRACKET_R ELSE stmt .

    $default  reduce using rule 30 (if)


State 234

   29 if: IF BRACKET_L expr BRACKET_R stmt ELSE CURLY_BRACKET_L stmts CURLY_BRACKET_R .

    $default  reduce using rule 29 (if)


State 235

   25 dowhile: DO CURLY_BRACKET_L stmts CURLY_BRACKET_R WHILE BRACKET_L expr BRACKET_R SEMICOLON .

    $default  reduce using rule 25 (dowhile)


State 236

   32 for: FOR BRACKET_L INT ID LET expr COMMA expr BRACKET_R . CURLY_BRACKET_R exprs CURLY_BRACKET_R

    CURLY_BRACKET_R  shift, and go to state 240


State 237

   31 for: FOR BRACKET_L INT ID LET expr COMMA expr COMMA . expr BRACKET_R CURLY_BRACKET_L exprs CURLY_BRACKET_R

    BRACKET_L           shift, and go to state 49
    STRAIGHT_BRACKET_L  shift, and go to state 24
    MINUS               shift, and go to state 26
    TRUEVAL             shift, and go to state 27
    FALSEVAL            shift, and go to state 28
    NOT                 shift, and go to state 30
    NUM                 shift, and go to state 31
    FLOAT               shift, and go to state 32
    ID                  shift, and go to state 33

    expr      go to state 241
    cast      go to state 36
    funcall   go to state 37
    arrexpr   go to state 38
    var       go to state 39
    constant  go to state 40
    floatval  go to state 41
    intval    go to state 42
    boolval   go to state 43


State 238

   63 vardec: vardec type STRAIGHT_BRACKET_L exprs STRAIGHT_BRACKET_R ID LET expr SEMICOLON .

    $default  reduce using rule 63 (vardec)


State 239

   28 if: IF BRACKET_L expr BRACKET_R CURLY_BRACKET_L stmts CURLY_BRACKET_R ELSE CURLY_BRACKET_L stmts . CURLY_BRACKET_R

    CURLY_BRACKET_R  shift, and go to state 242


State 240

   32 for: FOR BRACKET_L INT ID LET expr COMMA expr BRACKET_R CURLY_BRACKET_R . exprs CURLY_BRACKET_R

    BRACKET_L           shift, and go to state 49
    STRAIGHT_BRACKET_L  shift, and go to state 24
    MINUS               shift, and go to state 26
    TRUEVAL             shift, and go to state 27
    FALSEVAL            shift, and go to state 28
    NOT                 shift, and go to state 30
    NUM                 shift, and go to state 31
    FLOAT               shift, and go to state 32
    ID                  shift, and go to state 33

    exprs     go to state 243
    expr      go to state 35
    cast      go to state 36
    funcall   go to state 37
    arrexpr   go to state 38
    var       go to state 39
    constant  go to state 40
    floatval  go to state 41
    intval    go to state 42
    boolval   go to state 43


State 241

   31 for: FOR BRACKET_L INT ID LET expr COMMA expr COMMA expr . BRACKET_R CURLY_BRACKET_L exprs CURLY_BRACKET_R
   79 expr: expr . PLUS expr
   80     | expr . MINUS expr
   81     | expr . STAR expr
   82     | expr . SLASH expr
   83     | expr . PERCENT expr
   84     | expr . LE expr
   85     | expr . LT expr
   86     | expr . GE expr
   87     | expr . GT expr
   88     | expr . EQ expr
   89     | expr . NE expr
   90     | expr . OR expr
   91     | expr . AND expr

    BRACKET_R  shift, and go to state 244
    MINUS      shift, and go to state 63
    PLUS       shift, and go to state 64
    STAR       shift, and go to state 65
    SLASH      shift, and go to state 66
    PERCENT    shift, and go to state 67
    LE         shift, and go to state 68
    LT         shift, and go to state 69
    GE         shift, and go to state 70
    GT         shift, and go to state 71
    EQ         shift, and go to state 72
    NE         shift, and go to state 73
    OR         shift, and go to state 74
    AND        shift, and go to state 75


State 242

   28 if: IF BRACKET_L expr BRACKET_R CURLY_BRACKET_L stmts CURLY_BRACKET_R ELSE CURLY_BRACKET_L stmts CURLY_BRACKET_R .

    $default  reduce using rule 28 (if)


State 243

   32 for: FOR BRACKET_L INT ID LET expr COMMA expr BRACKET_R CURLY_BRACKET_R exprs . CURLY_BRACKET_R

    CURLY_BRACKET_R  shift, and go to state 245


State 244

   31 for: FOR BRACKET_L INT ID LET expr COMMA expr COMMA expr BRACKET_R . CURLY_BRACKET_L exprs CURLY_BRACKET_R

    CURLY_BRACKET_L  shift, and go to state 246


State 245

   32 for: FOR BRACKET_L INT ID LET expr COMMA expr BRACKET_R CURLY_BRACKET_R exprs CURLY_BRACKET_R .

    $default  reduce using rule 32 (for)


State 246

   31 for: FOR BRACKET_L INT ID LET expr COMMA expr COMMA expr BRACKET_R CURLY_BRACKET_L . exprs CURLY_BRACKET_R

    BRACKET_L           shift, and go to state 49
    STRAIGHT_BRACKET_L  shift, and go to state 24
    MINUS               shift, and go to state 26
    TRUEVAL             shift, and go to state 27
    FALSEVAL            shift, and go to state 28
    NOT                 shift, and go to state 30
    NUM                 shift, and go to state 31
    FLOAT               shift, and go to state 32
    ID                  shift, and go to state 33

    exprs     go to state 247
    expr      go to state 35
    cast      go to state 36
    funcall   go to state 37
    arrexpr   go to state 38
    var       go to state 39
    constant  go to state 40
    floatval  go to state 41
    intval    go to state 42
    boolval   go to state 43


State 247

   31 for: FOR BRACKET_L INT ID LET expr COMMA expr COMMA expr BRACKET_R CURLY_BRACKET_L exprs . CURLY_BRACKET_R

    CURLY_BRACKET_R  shift, and go to state 248


State 248

   31 for: FOR BRACKET_L INT ID LET expr COMMA expr COMMA expr BRACKET_R CURLY_BRACKET_L exprs CURLY_BRACKET_R .

    $default  reduce using rule 31 (for)
